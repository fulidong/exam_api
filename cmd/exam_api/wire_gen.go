// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"exam_api/internal/biz"
	"exam_api/internal/conf"
	"exam_api/internal/data"
	"exam_api/internal/server"
	"exam_api/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	examineeRepo := data.NewExamineeRepo(dataData, logger)
	sysLoginRepo := data.NewSysLoginRepo(dataData, logger)
	loginUseCase := biz.NewLoginUseCase(examineeRepo, sysLoginRepo, logger)
	examineeSalesPaperAssociationRepo := data.NewExamineeSalesPaperAssociationRepo(dataData, logger)
	salesPaperRepo := data.NewSalesPaperRepo(dataData, logger)
	salesPaperUseCase := biz.NewSalesPaperUseCase(salesPaperRepo, logger)
	questionRepo := data.NewQuestionRepo(dataData, logger)
	redisRepository := data.RedisRepositoryFromData(dataData)
	questionUseCase := biz.NewQuestionUseCase(questionRepo, redisRepository, logger)
	examineeSalesPaperAssociationUseCase := biz.NewExamineeSalesPaperAssociationUseCase(examineeSalesPaperAssociationRepo, salesPaperUseCase, questionUseCase, logger)
	examineeAnswerRepo := data.NewExamineeAnswerRepo(dataData, logger)
	examineeQuestionAnswerRepo := data.NewExamineeQuestionAnswerRepo(dataData, logger)
	examineeQuestionAnswerUseCase := biz.NewExamineeQuestionAnswerUseCase(examineeQuestionAnswerRepo, logger)
	examEventRepo := data.NewExamEventRepo(dataData, logger)
	examEventUseCase := biz.NewExamEventUseCase(examEventRepo, logger)
	examineeAnswerUseCase := biz.NewExamineeAnswerUseCase(examineeAnswerRepo, examineeSalesPaperAssociationUseCase, salesPaperUseCase, examineeQuestionAnswerUseCase, examEventUseCase, redisRepository, logger)
	examService := service.NewExamService(loginUseCase, examineeSalesPaperAssociationUseCase, questionUseCase, salesPaperUseCase, examineeAnswerUseCase)
	grpcServer := server.NewGRPCServer(confServer, examService, logger)
	httpServer := server.NewHTTPServer(confServer, examService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
