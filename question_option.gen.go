// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package exam_api

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"exam_api/internal/data/entity"
)

func newQuestionOption(db *gorm.DB, opts ...gen.DOOption) questionOption {
	_questionOption := questionOption{}

	_questionOption.questionOptionDo.UseDB(db, opts...)
	_questionOption.questionOptionDo.UseModel(&entity.QuestionOption{})

	tableName := _questionOption.questionOptionDo.TableName()
	_questionOption.ALL = field.NewAsterisk(tableName)
	_questionOption.ID = field.NewString(tableName, "id")
	_questionOption.QuestionID = field.NewString(tableName, "question_id")
	_questionOption.Score = field.NewFloat64(tableName, "score")
	_questionOption.Description = field.NewString(tableName, "description")
	_questionOption.DimensionID = field.NewString(tableName, "dimension_id")
	_questionOption.Order_ = field.NewInt32(tableName, "order")
	_questionOption.CreatedAt = field.NewTime(tableName, "created_at")
	_questionOption.UpdatedAt = field.NewTime(tableName, "updated_at")
	_questionOption.CreatedBy = field.NewString(tableName, "created_by")
	_questionOption.UpdatedBy = field.NewString(tableName, "updated_by")
	_questionOption.DeletedAt = field.NewField(tableName, "deleted_at")

	_questionOption.fillFieldMap()

	return _questionOption
}

// questionOption 试题选项
type questionOption struct {
	questionOptionDo

	ALL         field.Asterisk
	ID          field.String  // 主键
	QuestionID  field.String  // Question表外键。当选项与维度直
	Score       field.Float64 // 选项分数
	Description field.String  // 描述
	DimensionID field.String  // 维度ID，适用于选项直接绑定维
	Order_      field.Int32   // 排序
	CreatedAt   field.Time    // 创建时间
	UpdatedAt   field.Time    // 更新时间
	CreatedBy   field.String  // 创建人标识
	UpdatedBy   field.String  // 更新人标识
	DeletedAt   field.Field   // 逻辑删除时间

	fieldMap map[string]field.Expr
}

func (q questionOption) Table(newTableName string) *questionOption {
	q.questionOptionDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q questionOption) As(alias string) *questionOption {
	q.questionOptionDo.DO = *(q.questionOptionDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *questionOption) updateTableName(table string) *questionOption {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewString(table, "id")
	q.QuestionID = field.NewString(table, "question_id")
	q.Score = field.NewFloat64(table, "score")
	q.Description = field.NewString(table, "description")
	q.DimensionID = field.NewString(table, "dimension_id")
	q.Order_ = field.NewInt32(table, "order")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")
	q.CreatedBy = field.NewString(table, "created_by")
	q.UpdatedBy = field.NewString(table, "updated_by")
	q.DeletedAt = field.NewField(table, "deleted_at")

	q.fillFieldMap()

	return q
}

func (q *questionOption) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *questionOption) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 11)
	q.fieldMap["id"] = q.ID
	q.fieldMap["question_id"] = q.QuestionID
	q.fieldMap["score"] = q.Score
	q.fieldMap["description"] = q.Description
	q.fieldMap["dimension_id"] = q.DimensionID
	q.fieldMap["order"] = q.Order_
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
	q.fieldMap["created_by"] = q.CreatedBy
	q.fieldMap["updated_by"] = q.UpdatedBy
	q.fieldMap["deleted_at"] = q.DeletedAt
}

func (q questionOption) clone(db *gorm.DB) questionOption {
	q.questionOptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q questionOption) replaceDB(db *gorm.DB) questionOption {
	q.questionOptionDo.ReplaceDB(db)
	return q
}

type questionOptionDo struct{ gen.DO }

func (q questionOptionDo) Debug() *questionOptionDo {
	return q.withDO(q.DO.Debug())
}

func (q questionOptionDo) WithContext(ctx context.Context) *questionOptionDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questionOptionDo) ReadDB() *questionOptionDo {
	return q.Clauses(dbresolver.Read)
}

func (q questionOptionDo) WriteDB() *questionOptionDo {
	return q.Clauses(dbresolver.Write)
}

func (q questionOptionDo) Session(config *gorm.Session) *questionOptionDo {
	return q.withDO(q.DO.Session(config))
}

func (q questionOptionDo) Clauses(conds ...clause.Expression) *questionOptionDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questionOptionDo) Returning(value interface{}, columns ...string) *questionOptionDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questionOptionDo) Not(conds ...gen.Condition) *questionOptionDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questionOptionDo) Or(conds ...gen.Condition) *questionOptionDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questionOptionDo) Select(conds ...field.Expr) *questionOptionDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questionOptionDo) Where(conds ...gen.Condition) *questionOptionDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questionOptionDo) Order(conds ...field.Expr) *questionOptionDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questionOptionDo) Distinct(cols ...field.Expr) *questionOptionDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questionOptionDo) Omit(cols ...field.Expr) *questionOptionDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questionOptionDo) Join(table schema.Tabler, on ...field.Expr) *questionOptionDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questionOptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *questionOptionDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questionOptionDo) RightJoin(table schema.Tabler, on ...field.Expr) *questionOptionDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questionOptionDo) Group(cols ...field.Expr) *questionOptionDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questionOptionDo) Having(conds ...gen.Condition) *questionOptionDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questionOptionDo) Limit(limit int) *questionOptionDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questionOptionDo) Offset(offset int) *questionOptionDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questionOptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *questionOptionDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questionOptionDo) Unscoped() *questionOptionDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questionOptionDo) Create(values ...*entity.QuestionOption) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questionOptionDo) CreateInBatches(values []*entity.QuestionOption, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questionOptionDo) Save(values ...*entity.QuestionOption) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questionOptionDo) First() (*entity.QuestionOption, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuestionOption), nil
	}
}

func (q questionOptionDo) Take() (*entity.QuestionOption, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuestionOption), nil
	}
}

func (q questionOptionDo) Last() (*entity.QuestionOption, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuestionOption), nil
	}
}

func (q questionOptionDo) Find() ([]*entity.QuestionOption, error) {
	result, err := q.DO.Find()
	return result.([]*entity.QuestionOption), err
}

func (q questionOptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.QuestionOption, err error) {
	buf := make([]*entity.QuestionOption, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questionOptionDo) FindInBatches(result *[]*entity.QuestionOption, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questionOptionDo) Attrs(attrs ...field.AssignExpr) *questionOptionDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questionOptionDo) Assign(attrs ...field.AssignExpr) *questionOptionDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questionOptionDo) Joins(fields ...field.RelationField) *questionOptionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questionOptionDo) Preload(fields ...field.RelationField) *questionOptionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questionOptionDo) FirstOrInit() (*entity.QuestionOption, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuestionOption), nil
	}
}

func (q questionOptionDo) FirstOrCreate() (*entity.QuestionOption, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuestionOption), nil
	}
}

func (q questionOptionDo) FindByPage(offset int, limit int) (result []*entity.QuestionOption, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questionOptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questionOptionDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q questionOptionDo) Delete(models ...*entity.QuestionOption) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *questionOptionDo) withDO(do gen.Dao) *questionOptionDo {
	q.DO = *do.(*gen.DO)
	return q
}
