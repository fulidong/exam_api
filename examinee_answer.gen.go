// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package exam_api

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"exam_api/internal/data/entity"
)

func newExamineeAnswer(db *gorm.DB, opts ...gen.DOOption) examineeAnswer {
	_examineeAnswer := examineeAnswer{}

	_examineeAnswer.examineeAnswerDo.UseDB(db, opts...)
	_examineeAnswer.examineeAnswerDo.UseModel(&entity.ExamineeAnswer{})

	tableName := _examineeAnswer.examineeAnswerDo.TableName()
	_examineeAnswer.ALL = field.NewAsterisk(tableName)
	_examineeAnswer.ID = field.NewString(tableName, "id")
	_examineeAnswer.SalesPaperID = field.NewString(tableName, "sales_paper_id")
	_examineeAnswer.ExamineeID = field.NewString(tableName, "examinee_id")
	_examineeAnswer.ExamineeSalesPaperAssociationID = field.NewString(tableName, "examinee_sales_paper_association_id")
	_examineeAnswer.Score = field.NewFloat64(tableName, "score")
	_examineeAnswer.BeginTestTime = field.NewTime(tableName, "begin_test_time")
	_examineeAnswer.SubmitTime = field.NewTime(tableName, "submit_time")
	_examineeAnswer.CompleteQuestionNum = field.NewInt32(tableName, "complete_question_num")
	_examineeAnswer.LastActionTime = field.NewTime(tableName, "last_action_time")
	_examineeAnswer.Comparability = field.NewInt32(tableName, "comparability")
	_examineeAnswer.Deadline = field.NewTime(tableName, "deadline")
	_examineeAnswer.Usability = field.NewInt32(tableName, "usability")
	_examineeAnswer.RemainingTimelimit = field.NewInt32(tableName, "remaining_timelimit")
	_examineeAnswer.CreatedAt = field.NewTime(tableName, "created_at")
	_examineeAnswer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_examineeAnswer.CreatedBy = field.NewString(tableName, "created_by")
	_examineeAnswer.UpdatedBy = field.NewString(tableName, "updated_by")
	_examineeAnswer.DeletedAt = field.NewField(tableName, "deleted_at")

	_examineeAnswer.fillFieldMap()

	return _examineeAnswer
}

// examineeAnswer 考生答题记录表
type examineeAnswer struct {
	examineeAnswerDo

	ALL                             field.Asterisk
	ID                              field.String  // 主键（雪花ID）
	SalesPaperID                    field.String  // 试卷ID
	ExamineeID                      field.String  // 考生唯一标识
	ExamineeSalesPaperAssociationID field.String  // 考生试卷关联idID
	Score                           field.Float64 // 答题标准分
	BeginTestTime                   field.Time    // 答题开始时刻
	SubmitTime                      field.Time    // 答题提交时刻
	CompleteQuestionNum             field.Int32   // 完成题目个数
	LastActionTime                  field.Time    // 最后活动时刻
	Comparability                   field.Int32   // 匹配度
	Deadline                        field.Time    // 试卷截止时刻
	Usability                       field.Int32   // 试卷有效性（1~4）
	RemainingTimelimit              field.Int32   // 考试剩余时长
	CreatedAt                       field.Time    // 创建时间
	UpdatedAt                       field.Time    // 更新时间
	CreatedBy                       field.String  // 创建人标识
	UpdatedBy                       field.String  // 更新人标识
	DeletedAt                       field.Field   // 逻辑删除时间

	fieldMap map[string]field.Expr
}

func (e examineeAnswer) Table(newTableName string) *examineeAnswer {
	e.examineeAnswerDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e examineeAnswer) As(alias string) *examineeAnswer {
	e.examineeAnswerDo.DO = *(e.examineeAnswerDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *examineeAnswer) updateTableName(table string) *examineeAnswer {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.SalesPaperID = field.NewString(table, "sales_paper_id")
	e.ExamineeID = field.NewString(table, "examinee_id")
	e.ExamineeSalesPaperAssociationID = field.NewString(table, "examinee_sales_paper_association_id")
	e.Score = field.NewFloat64(table, "score")
	e.BeginTestTime = field.NewTime(table, "begin_test_time")
	e.SubmitTime = field.NewTime(table, "submit_time")
	e.CompleteQuestionNum = field.NewInt32(table, "complete_question_num")
	e.LastActionTime = field.NewTime(table, "last_action_time")
	e.Comparability = field.NewInt32(table, "comparability")
	e.Deadline = field.NewTime(table, "deadline")
	e.Usability = field.NewInt32(table, "usability")
	e.RemainingTimelimit = field.NewInt32(table, "remaining_timelimit")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.CreatedBy = field.NewString(table, "created_by")
	e.UpdatedBy = field.NewString(table, "updated_by")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *examineeAnswer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *examineeAnswer) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 18)
	e.fieldMap["id"] = e.ID
	e.fieldMap["sales_paper_id"] = e.SalesPaperID
	e.fieldMap["examinee_id"] = e.ExamineeID
	e.fieldMap["examinee_sales_paper_association_id"] = e.ExamineeSalesPaperAssociationID
	e.fieldMap["score"] = e.Score
	e.fieldMap["begin_test_time"] = e.BeginTestTime
	e.fieldMap["submit_time"] = e.SubmitTime
	e.fieldMap["complete_question_num"] = e.CompleteQuestionNum
	e.fieldMap["last_action_time"] = e.LastActionTime
	e.fieldMap["comparability"] = e.Comparability
	e.fieldMap["deadline"] = e.Deadline
	e.fieldMap["usability"] = e.Usability
	e.fieldMap["remaining_timelimit"] = e.RemainingTimelimit
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e examineeAnswer) clone(db *gorm.DB) examineeAnswer {
	e.examineeAnswerDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e examineeAnswer) replaceDB(db *gorm.DB) examineeAnswer {
	e.examineeAnswerDo.ReplaceDB(db)
	return e
}

type examineeAnswerDo struct{ gen.DO }

func (e examineeAnswerDo) Debug() *examineeAnswerDo {
	return e.withDO(e.DO.Debug())
}

func (e examineeAnswerDo) WithContext(ctx context.Context) *examineeAnswerDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e examineeAnswerDo) ReadDB() *examineeAnswerDo {
	return e.Clauses(dbresolver.Read)
}

func (e examineeAnswerDo) WriteDB() *examineeAnswerDo {
	return e.Clauses(dbresolver.Write)
}

func (e examineeAnswerDo) Session(config *gorm.Session) *examineeAnswerDo {
	return e.withDO(e.DO.Session(config))
}

func (e examineeAnswerDo) Clauses(conds ...clause.Expression) *examineeAnswerDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e examineeAnswerDo) Returning(value interface{}, columns ...string) *examineeAnswerDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e examineeAnswerDo) Not(conds ...gen.Condition) *examineeAnswerDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e examineeAnswerDo) Or(conds ...gen.Condition) *examineeAnswerDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e examineeAnswerDo) Select(conds ...field.Expr) *examineeAnswerDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e examineeAnswerDo) Where(conds ...gen.Condition) *examineeAnswerDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e examineeAnswerDo) Order(conds ...field.Expr) *examineeAnswerDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e examineeAnswerDo) Distinct(cols ...field.Expr) *examineeAnswerDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e examineeAnswerDo) Omit(cols ...field.Expr) *examineeAnswerDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e examineeAnswerDo) Join(table schema.Tabler, on ...field.Expr) *examineeAnswerDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e examineeAnswerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *examineeAnswerDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e examineeAnswerDo) RightJoin(table schema.Tabler, on ...field.Expr) *examineeAnswerDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e examineeAnswerDo) Group(cols ...field.Expr) *examineeAnswerDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e examineeAnswerDo) Having(conds ...gen.Condition) *examineeAnswerDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e examineeAnswerDo) Limit(limit int) *examineeAnswerDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e examineeAnswerDo) Offset(offset int) *examineeAnswerDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e examineeAnswerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *examineeAnswerDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e examineeAnswerDo) Unscoped() *examineeAnswerDo {
	return e.withDO(e.DO.Unscoped())
}

func (e examineeAnswerDo) Create(values ...*entity.ExamineeAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e examineeAnswerDo) CreateInBatches(values []*entity.ExamineeAnswer, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e examineeAnswerDo) Save(values ...*entity.ExamineeAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e examineeAnswerDo) First() (*entity.ExamineeAnswer, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeAnswer), nil
	}
}

func (e examineeAnswerDo) Take() (*entity.ExamineeAnswer, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeAnswer), nil
	}
}

func (e examineeAnswerDo) Last() (*entity.ExamineeAnswer, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeAnswer), nil
	}
}

func (e examineeAnswerDo) Find() ([]*entity.ExamineeAnswer, error) {
	result, err := e.DO.Find()
	return result.([]*entity.ExamineeAnswer), err
}

func (e examineeAnswerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ExamineeAnswer, err error) {
	buf := make([]*entity.ExamineeAnswer, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e examineeAnswerDo) FindInBatches(result *[]*entity.ExamineeAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e examineeAnswerDo) Attrs(attrs ...field.AssignExpr) *examineeAnswerDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e examineeAnswerDo) Assign(attrs ...field.AssignExpr) *examineeAnswerDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e examineeAnswerDo) Joins(fields ...field.RelationField) *examineeAnswerDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e examineeAnswerDo) Preload(fields ...field.RelationField) *examineeAnswerDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e examineeAnswerDo) FirstOrInit() (*entity.ExamineeAnswer, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeAnswer), nil
	}
}

func (e examineeAnswerDo) FirstOrCreate() (*entity.ExamineeAnswer, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeAnswer), nil
	}
}

func (e examineeAnswerDo) FindByPage(offset int, limit int) (result []*entity.ExamineeAnswer, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e examineeAnswerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e examineeAnswerDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e examineeAnswerDo) Delete(models ...*entity.ExamineeAnswer) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *examineeAnswerDo) withDO(do gen.Dao) *examineeAnswerDo {
	e.DO = *do.(*gen.DO)
	return e
}
