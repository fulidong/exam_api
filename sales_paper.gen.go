// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package exam_api

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"exam_api/internal/data/entity"
)

func newSalesPaper(db *gorm.DB, opts ...gen.DOOption) salesPaper {
	_salesPaper := salesPaper{}

	_salesPaper.salesPaperDo.UseDB(db, opts...)
	_salesPaper.salesPaperDo.UseModel(&entity.SalesPaper{})

	tableName := _salesPaper.salesPaperDo.TableName()
	_salesPaper.ALL = field.NewAsterisk(tableName)
	_salesPaper.ID = field.NewString(tableName, "id")
	_salesPaper.Name = field.NewString(tableName, "name")
	_salesPaper.RecommendTimeLim = field.NewInt32(tableName, "recommend_time_lim")
	_salesPaper.MaxScore = field.NewFloat64(tableName, "max_score")
	_salesPaper.MinScore = field.NewFloat64(tableName, "min_score")
	_salesPaper.IsEnabled = field.NewBool(tableName, "is_enabled")
	_salesPaper.IsUsed = field.NewBool(tableName, "is_used")
	_salesPaper.Expression = field.NewString(tableName, "expression")
	_salesPaper.Rounding = field.NewInt32(tableName, "rounding")
	_salesPaper.IsSumScore = field.NewBool(tableName, "is_sum_score")
	_salesPaper.Mark = field.NewString(tableName, "mark")
	_salesPaper.CreatedAt = field.NewTime(tableName, "created_at")
	_salesPaper.UpdatedAt = field.NewTime(tableName, "updated_at")
	_salesPaper.CreatedBy = field.NewString(tableName, "created_by")
	_salesPaper.UpdatedBy = field.NewString(tableName, "updated_by")
	_salesPaper.DeletedAt = field.NewField(tableName, "deleted_at")

	_salesPaper.fillFieldMap()

	return _salesPaper
}

// salesPaper 售卷，作为系统对外销售的产品
type salesPaper struct {
	salesPaperDo

	ALL              field.Asterisk
	ID               field.String  // 主键
	Name             field.String  // 售卷名称
	RecommendTimeLim field.Int32   // 推荐售卷时长
	MaxScore         field.Float64 // 最高分数上限
	MinScore         field.Float64 // 最低分数下限
	IsEnabled        field.Bool    // 是否启用
	IsUsed           field.Bool    // 是否已使用
	Expression       field.String  // 标准分计算公式
	Rounding         field.Int32   // 保留小数位
	IsSumScore       field.Bool    // 是否需要总分
	Mark             field.String  // 备注
	CreatedAt        field.Time    // 创建时间
	UpdatedAt        field.Time    // 更新时间
	CreatedBy        field.String  // 创建人标识
	UpdatedBy        field.String  // 更新人标识
	DeletedAt        field.Field   // 逻辑删除时间

	fieldMap map[string]field.Expr
}

func (s salesPaper) Table(newTableName string) *salesPaper {
	s.salesPaperDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s salesPaper) As(alias string) *salesPaper {
	s.salesPaperDo.DO = *(s.salesPaperDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *salesPaper) updateTableName(table string) *salesPaper {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.RecommendTimeLim = field.NewInt32(table, "recommend_time_lim")
	s.MaxScore = field.NewFloat64(table, "max_score")
	s.MinScore = field.NewFloat64(table, "min_score")
	s.IsEnabled = field.NewBool(table, "is_enabled")
	s.IsUsed = field.NewBool(table, "is_used")
	s.Expression = field.NewString(table, "expression")
	s.Rounding = field.NewInt32(table, "rounding")
	s.IsSumScore = field.NewBool(table, "is_sum_score")
	s.Mark = field.NewString(table, "mark")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.CreatedBy = field.NewString(table, "created_by")
	s.UpdatedBy = field.NewString(table, "updated_by")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *salesPaper) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *salesPaper) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["recommend_time_lim"] = s.RecommendTimeLim
	s.fieldMap["max_score"] = s.MaxScore
	s.fieldMap["min_score"] = s.MinScore
	s.fieldMap["is_enabled"] = s.IsEnabled
	s.fieldMap["is_used"] = s.IsUsed
	s.fieldMap["expression"] = s.Expression
	s.fieldMap["rounding"] = s.Rounding
	s.fieldMap["is_sum_score"] = s.IsSumScore
	s.fieldMap["mark"] = s.Mark
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_by"] = s.UpdatedBy
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s salesPaper) clone(db *gorm.DB) salesPaper {
	s.salesPaperDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s salesPaper) replaceDB(db *gorm.DB) salesPaper {
	s.salesPaperDo.ReplaceDB(db)
	return s
}

type salesPaperDo struct{ gen.DO }

func (s salesPaperDo) Debug() *salesPaperDo {
	return s.withDO(s.DO.Debug())
}

func (s salesPaperDo) WithContext(ctx context.Context) *salesPaperDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s salesPaperDo) ReadDB() *salesPaperDo {
	return s.Clauses(dbresolver.Read)
}

func (s salesPaperDo) WriteDB() *salesPaperDo {
	return s.Clauses(dbresolver.Write)
}

func (s salesPaperDo) Session(config *gorm.Session) *salesPaperDo {
	return s.withDO(s.DO.Session(config))
}

func (s salesPaperDo) Clauses(conds ...clause.Expression) *salesPaperDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s salesPaperDo) Returning(value interface{}, columns ...string) *salesPaperDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s salesPaperDo) Not(conds ...gen.Condition) *salesPaperDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s salesPaperDo) Or(conds ...gen.Condition) *salesPaperDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s salesPaperDo) Select(conds ...field.Expr) *salesPaperDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s salesPaperDo) Where(conds ...gen.Condition) *salesPaperDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s salesPaperDo) Order(conds ...field.Expr) *salesPaperDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s salesPaperDo) Distinct(cols ...field.Expr) *salesPaperDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s salesPaperDo) Omit(cols ...field.Expr) *salesPaperDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s salesPaperDo) Join(table schema.Tabler, on ...field.Expr) *salesPaperDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s salesPaperDo) LeftJoin(table schema.Tabler, on ...field.Expr) *salesPaperDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s salesPaperDo) RightJoin(table schema.Tabler, on ...field.Expr) *salesPaperDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s salesPaperDo) Group(cols ...field.Expr) *salesPaperDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s salesPaperDo) Having(conds ...gen.Condition) *salesPaperDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s salesPaperDo) Limit(limit int) *salesPaperDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s salesPaperDo) Offset(offset int) *salesPaperDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s salesPaperDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *salesPaperDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s salesPaperDo) Unscoped() *salesPaperDo {
	return s.withDO(s.DO.Unscoped())
}

func (s salesPaperDo) Create(values ...*entity.SalesPaper) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s salesPaperDo) CreateInBatches(values []*entity.SalesPaper, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s salesPaperDo) Save(values ...*entity.SalesPaper) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s salesPaperDo) First() (*entity.SalesPaper, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaper), nil
	}
}

func (s salesPaperDo) Take() (*entity.SalesPaper, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaper), nil
	}
}

func (s salesPaperDo) Last() (*entity.SalesPaper, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaper), nil
	}
}

func (s salesPaperDo) Find() ([]*entity.SalesPaper, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SalesPaper), err
}

func (s salesPaperDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SalesPaper, err error) {
	buf := make([]*entity.SalesPaper, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s salesPaperDo) FindInBatches(result *[]*entity.SalesPaper, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s salesPaperDo) Attrs(attrs ...field.AssignExpr) *salesPaperDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s salesPaperDo) Assign(attrs ...field.AssignExpr) *salesPaperDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s salesPaperDo) Joins(fields ...field.RelationField) *salesPaperDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s salesPaperDo) Preload(fields ...field.RelationField) *salesPaperDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s salesPaperDo) FirstOrInit() (*entity.SalesPaper, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaper), nil
	}
}

func (s salesPaperDo) FirstOrCreate() (*entity.SalesPaper, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaper), nil
	}
}

func (s salesPaperDo) FindByPage(offset int, limit int) (result []*entity.SalesPaper, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s salesPaperDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s salesPaperDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s salesPaperDo) Delete(models ...*entity.SalesPaper) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *salesPaperDo) withDO(do gen.Dao) *salesPaperDo {
	s.DO = *do.(*gen.DO)
	return s
}
