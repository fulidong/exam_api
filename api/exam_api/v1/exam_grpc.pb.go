// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: exam_api/v1/exam.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExamServiceClient is the client API for ExamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExamServiceClient interface {
	// 考试端登录
	ExamLogin(ctx context.Context, in *ExamLoginRequest, opts ...grpc.CallOption) (*ExamLoginResponse, error)
	// 待考试列表
	GetExamPageList(ctx context.Context, in *GetExamPageListRequest, opts ...grpc.CallOption) (*GetExamPageListResponse, error)
	// 开始考试
	StartExam(ctx context.Context, in *StartExamRequest, opts ...grpc.CallOption) (*StartExamResponse, error)
	// 获取考试题目
	ExamQuestion(ctx context.Context, in *ExamQuestionRequest, opts ...grpc.CallOption) (*ExamQuestionResponse, error)
	// 获取考试上次题目作答记录
	ExamQuestionRecord(ctx context.Context, in *ExamQuestionRecordRequest, opts ...grpc.CallOption) (*ExamQuestionRecordResponse, error)
	// 心跳&保存答案
	HeartbeatAndSave(ctx context.Context, in *HeartbeatAndSaveRequest, opts ...grpc.CallOption) (*HeartbeatAndSaveResponse, error)
	// 提交考试
	SubmitExam(ctx context.Context, in *SubmitExamRequest, opts ...grpc.CallOption) (*SubmitExamResponse, error)
}

type examServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExamServiceClient(cc grpc.ClientConnInterface) ExamServiceClient {
	return &examServiceClient{cc}
}

func (c *examServiceClient) ExamLogin(ctx context.Context, in *ExamLoginRequest, opts ...grpc.CallOption) (*ExamLoginResponse, error) {
	out := new(ExamLoginResponse)
	err := c.cc.Invoke(ctx, "/exam_api.v1.ExamService/ExamLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) GetExamPageList(ctx context.Context, in *GetExamPageListRequest, opts ...grpc.CallOption) (*GetExamPageListResponse, error) {
	out := new(GetExamPageListResponse)
	err := c.cc.Invoke(ctx, "/exam_api.v1.ExamService/GetExamPageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) StartExam(ctx context.Context, in *StartExamRequest, opts ...grpc.CallOption) (*StartExamResponse, error) {
	out := new(StartExamResponse)
	err := c.cc.Invoke(ctx, "/exam_api.v1.ExamService/StartExam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) ExamQuestion(ctx context.Context, in *ExamQuestionRequest, opts ...grpc.CallOption) (*ExamQuestionResponse, error) {
	out := new(ExamQuestionResponse)
	err := c.cc.Invoke(ctx, "/exam_api.v1.ExamService/ExamQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) ExamQuestionRecord(ctx context.Context, in *ExamQuestionRecordRequest, opts ...grpc.CallOption) (*ExamQuestionRecordResponse, error) {
	out := new(ExamQuestionRecordResponse)
	err := c.cc.Invoke(ctx, "/exam_api.v1.ExamService/ExamQuestionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) HeartbeatAndSave(ctx context.Context, in *HeartbeatAndSaveRequest, opts ...grpc.CallOption) (*HeartbeatAndSaveResponse, error) {
	out := new(HeartbeatAndSaveResponse)
	err := c.cc.Invoke(ctx, "/exam_api.v1.ExamService/HeartbeatAndSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) SubmitExam(ctx context.Context, in *SubmitExamRequest, opts ...grpc.CallOption) (*SubmitExamResponse, error) {
	out := new(SubmitExamResponse)
	err := c.cc.Invoke(ctx, "/exam_api.v1.ExamService/SubmitExam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExamServiceServer is the server API for ExamService service.
// All implementations must embed UnimplementedExamServiceServer
// for forward compatibility
type ExamServiceServer interface {
	// 考试端登录
	ExamLogin(context.Context, *ExamLoginRequest) (*ExamLoginResponse, error)
	// 待考试列表
	GetExamPageList(context.Context, *GetExamPageListRequest) (*GetExamPageListResponse, error)
	// 开始考试
	StartExam(context.Context, *StartExamRequest) (*StartExamResponse, error)
	// 获取考试题目
	ExamQuestion(context.Context, *ExamQuestionRequest) (*ExamQuestionResponse, error)
	// 获取考试上次题目作答记录
	ExamQuestionRecord(context.Context, *ExamQuestionRecordRequest) (*ExamQuestionRecordResponse, error)
	// 心跳&保存答案
	HeartbeatAndSave(context.Context, *HeartbeatAndSaveRequest) (*HeartbeatAndSaveResponse, error)
	// 提交考试
	SubmitExam(context.Context, *SubmitExamRequest) (*SubmitExamResponse, error)
	mustEmbedUnimplementedExamServiceServer()
}

// UnimplementedExamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExamServiceServer struct {
}

func (UnimplementedExamServiceServer) ExamLogin(context.Context, *ExamLoginRequest) (*ExamLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExamLogin not implemented")
}
func (UnimplementedExamServiceServer) GetExamPageList(context.Context, *GetExamPageListRequest) (*GetExamPageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExamPageList not implemented")
}
func (UnimplementedExamServiceServer) StartExam(context.Context, *StartExamRequest) (*StartExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExam not implemented")
}
func (UnimplementedExamServiceServer) ExamQuestion(context.Context, *ExamQuestionRequest) (*ExamQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExamQuestion not implemented")
}
func (UnimplementedExamServiceServer) ExamQuestionRecord(context.Context, *ExamQuestionRecordRequest) (*ExamQuestionRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExamQuestionRecord not implemented")
}
func (UnimplementedExamServiceServer) HeartbeatAndSave(context.Context, *HeartbeatAndSaveRequest) (*HeartbeatAndSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatAndSave not implemented")
}
func (UnimplementedExamServiceServer) SubmitExam(context.Context, *SubmitExamRequest) (*SubmitExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitExam not implemented")
}
func (UnimplementedExamServiceServer) mustEmbedUnimplementedExamServiceServer() {}

// UnsafeExamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExamServiceServer will
// result in compilation errors.
type UnsafeExamServiceServer interface {
	mustEmbedUnimplementedExamServiceServer()
}

func RegisterExamServiceServer(s grpc.ServiceRegistrar, srv ExamServiceServer) {
	s.RegisterService(&ExamService_ServiceDesc, srv)
}

func _ExamService_ExamLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExamLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).ExamLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exam_api.v1.ExamService/ExamLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).ExamLogin(ctx, req.(*ExamLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_GetExamPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamPageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).GetExamPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exam_api.v1.ExamService/GetExamPageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).GetExamPageList(ctx, req.(*GetExamPageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_StartExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).StartExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exam_api.v1.ExamService/StartExam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).StartExam(ctx, req.(*StartExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_ExamQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExamQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).ExamQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exam_api.v1.ExamService/ExamQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).ExamQuestion(ctx, req.(*ExamQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_ExamQuestionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExamQuestionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).ExamQuestionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exam_api.v1.ExamService/ExamQuestionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).ExamQuestionRecord(ctx, req.(*ExamQuestionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_HeartbeatAndSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatAndSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).HeartbeatAndSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exam_api.v1.ExamService/HeartbeatAndSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).HeartbeatAndSave(ctx, req.(*HeartbeatAndSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_SubmitExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).SubmitExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exam_api.v1.ExamService/SubmitExam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).SubmitExam(ctx, req.(*SubmitExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExamService_ServiceDesc is the grpc.ServiceDesc for ExamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exam_api.v1.ExamService",
	HandlerType: (*ExamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExamLogin",
			Handler:    _ExamService_ExamLogin_Handler,
		},
		{
			MethodName: "GetExamPageList",
			Handler:    _ExamService_GetExamPageList_Handler,
		},
		{
			MethodName: "StartExam",
			Handler:    _ExamService_StartExam_Handler,
		},
		{
			MethodName: "ExamQuestion",
			Handler:    _ExamService_ExamQuestion_Handler,
		},
		{
			MethodName: "ExamQuestionRecord",
			Handler:    _ExamService_ExamQuestionRecord_Handler,
		},
		{
			MethodName: "HeartbeatAndSave",
			Handler:    _ExamService_HeartbeatAndSave_Handler,
		},
		{
			MethodName: "SubmitExam",
			Handler:    _ExamService_SubmitExam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exam_api/v1/exam.proto",
}
