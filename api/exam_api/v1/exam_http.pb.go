// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v3.19.3
// source: exam_api/v1/exam.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationExamServiceExamLogin = "/exam_api.v1.ExamService/ExamLogin"
const OperationExamServiceExamQuestion = "/exam_api.v1.ExamService/ExamQuestion"
const OperationExamServiceExamQuestionRecord = "/exam_api.v1.ExamService/ExamQuestionRecord"
const OperationExamServiceGetExamPageList = "/exam_api.v1.ExamService/GetExamPageList"
const OperationExamServiceHeartbeatAndSave = "/exam_api.v1.ExamService/HeartbeatAndSave"
const OperationExamServiceStartExam = "/exam_api.v1.ExamService/StartExam"
const OperationExamServiceSubmitExam = "/exam_api.v1.ExamService/SubmitExam"

type ExamServiceHTTPServer interface {
	// ExamLogin 考试端登录
	ExamLogin(context.Context, *ExamLoginRequest) (*ExamLoginResponse, error)
	// ExamQuestion 获取考试题目
	ExamQuestion(context.Context, *ExamQuestionRequest) (*ExamQuestionResponse, error)
	// ExamQuestionRecord 获取考试上次题目作答记录
	ExamQuestionRecord(context.Context, *ExamQuestionRecordRequest) (*ExamQuestionRecordResponse, error)
	// GetExamPageList 待考试列表
	GetExamPageList(context.Context, *GetExamPageListRequest) (*GetExamPageListResponse, error)
	// HeartbeatAndSave心跳&保存答案
	HeartbeatAndSave(context.Context, *HeartbeatAndSaveRequest) (*HeartbeatAndSaveResponse, error)
	// StartExam 开始考试
	StartExam(context.Context, *StartExamRequest) (*StartExamResponse, error)
	// SubmitExam提交考试
	SubmitExam(context.Context, *SubmitExamRequest) (*SubmitExamResponse, error)
}

func RegisterExamServiceHTTPServer(s *http.Server, srv ExamServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/exam/login", _ExamService_ExamLogin0_HTTP_Handler(srv))
	r.GET("/v1/exam/page_list", _ExamService_GetExamPageList0_HTTP_Handler(srv))
	r.POST("/v1/exam/start", _ExamService_StartExam0_HTTP_Handler(srv))
	r.GET("/v1/exam/questions", _ExamService_ExamQuestion0_HTTP_Handler(srv))
	r.POST("/v1/exam/exam_record", _ExamService_ExamQuestionRecord0_HTTP_Handler(srv))
	r.POST("/v1/exam/heartbeat_and_save", _ExamService_HeartbeatAndSave0_HTTP_Handler(srv))
	r.POST("/v1/exam/submit", _ExamService_SubmitExam0_HTTP_Handler(srv))
}

func _ExamService_ExamLogin0_HTTP_Handler(srv ExamServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExamLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExamServiceExamLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExamLogin(ctx, req.(*ExamLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExamLoginResponse)
		return ctx.Result(200, reply)
	}
}

func _ExamService_GetExamPageList0_HTTP_Handler(srv ExamServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExamPageListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExamServiceGetExamPageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExamPageList(ctx, req.(*GetExamPageListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetExamPageListResponse)
		return ctx.Result(200, reply)
	}
}

func _ExamService_StartExam0_HTTP_Handler(srv ExamServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StartExamRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExamServiceStartExam)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StartExam(ctx, req.(*StartExamRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StartExamResponse)
		return ctx.Result(200, reply)
	}
}

func _ExamService_ExamQuestion0_HTTP_Handler(srv ExamServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExamQuestionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExamServiceExamQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExamQuestion(ctx, req.(*ExamQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExamQuestionResponse)
		return ctx.Result(200, reply)
	}
}

func _ExamService_ExamQuestionRecord0_HTTP_Handler(srv ExamServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExamQuestionRecordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExamServiceExamQuestionRecord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExamQuestionRecord(ctx, req.(*ExamQuestionRecordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExamQuestionRecordResponse)
		return ctx.Result(200, reply)
	}
}

func _ExamService_HeartbeatAndSave0_HTTP_Handler(srv ExamServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HeartbeatAndSaveRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExamServiceHeartbeatAndSave)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HeartbeatAndSave(ctx, req.(*HeartbeatAndSaveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HeartbeatAndSaveResponse)
		return ctx.Result(200, reply)
	}
}

func _ExamService_SubmitExam0_HTTP_Handler(srv ExamServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitExamRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExamServiceSubmitExam)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitExam(ctx, req.(*SubmitExamRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitExamResponse)
		return ctx.Result(200, reply)
	}
}

type ExamServiceHTTPClient interface {
	ExamLogin(ctx context.Context, req *ExamLoginRequest, opts ...http.CallOption) (rsp *ExamLoginResponse, err error)
	ExamQuestion(ctx context.Context, req *ExamQuestionRequest, opts ...http.CallOption) (rsp *ExamQuestionResponse, err error)
	ExamQuestionRecord(ctx context.Context, req *ExamQuestionRecordRequest, opts ...http.CallOption) (rsp *ExamQuestionRecordResponse, err error)
	GetExamPageList(ctx context.Context, req *GetExamPageListRequest, opts ...http.CallOption) (rsp *GetExamPageListResponse, err error)
	HeartbeatAndSave(ctx context.Context, req *HeartbeatAndSaveRequest, opts ...http.CallOption) (rsp *HeartbeatAndSaveResponse, err error)
	StartExam(ctx context.Context, req *StartExamRequest, opts ...http.CallOption) (rsp *StartExamResponse, err error)
	SubmitExam(ctx context.Context, req *SubmitExamRequest, opts ...http.CallOption) (rsp *SubmitExamResponse, err error)
}

type ExamServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewExamServiceHTTPClient(client *http.Client) ExamServiceHTTPClient {
	return &ExamServiceHTTPClientImpl{client}
}

func (c *ExamServiceHTTPClientImpl) ExamLogin(ctx context.Context, in *ExamLoginRequest, opts ...http.CallOption) (*ExamLoginResponse, error) {
	var out ExamLoginResponse
	pattern := "/v1/exam/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationExamServiceExamLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ExamServiceHTTPClientImpl) ExamQuestion(ctx context.Context, in *ExamQuestionRequest, opts ...http.CallOption) (*ExamQuestionResponse, error) {
	var out ExamQuestionResponse
	pattern := "/v1/exam/questions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationExamServiceExamQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ExamServiceHTTPClientImpl) ExamQuestionRecord(ctx context.Context, in *ExamQuestionRecordRequest, opts ...http.CallOption) (*ExamQuestionRecordResponse, error) {
	var out ExamQuestionRecordResponse
	pattern := "/v1/exam/exam_record"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationExamServiceExamQuestionRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ExamServiceHTTPClientImpl) GetExamPageList(ctx context.Context, in *GetExamPageListRequest, opts ...http.CallOption) (*GetExamPageListResponse, error) {
	var out GetExamPageListResponse
	pattern := "/v1/exam/page_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationExamServiceGetExamPageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ExamServiceHTTPClientImpl) HeartbeatAndSave(ctx context.Context, in *HeartbeatAndSaveRequest, opts ...http.CallOption) (*HeartbeatAndSaveResponse, error) {
	var out HeartbeatAndSaveResponse
	pattern := "/v1/exam/heartbeat_and_save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationExamServiceHeartbeatAndSave))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ExamServiceHTTPClientImpl) StartExam(ctx context.Context, in *StartExamRequest, opts ...http.CallOption) (*StartExamResponse, error) {
	var out StartExamResponse
	pattern := "/v1/exam/start"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationExamServiceStartExam))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ExamServiceHTTPClientImpl) SubmitExam(ctx context.Context, in *SubmitExamRequest, opts ...http.CallOption) (*SubmitExamResponse, error) {
	var out SubmitExamResponse
	pattern := "/v1/exam/submit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationExamServiceSubmitExam))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
