// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package exam_api

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"exam_api/internal/data/entity"
)

func newExamineeAnswerDimensionScore(db *gorm.DB, opts ...gen.DOOption) examineeAnswerDimensionScore {
	_examineeAnswerDimensionScore := examineeAnswerDimensionScore{}

	_examineeAnswerDimensionScore.examineeAnswerDimensionScoreDo.UseDB(db, opts...)
	_examineeAnswerDimensionScore.examineeAnswerDimensionScoreDo.UseModel(&entity.ExamineeAnswerDimensionScore{})

	tableName := _examineeAnswerDimensionScore.examineeAnswerDimensionScoreDo.TableName()
	_examineeAnswerDimensionScore.ALL = field.NewAsterisk(tableName)
	_examineeAnswerDimensionScore.ID = field.NewString(tableName, "id")
	_examineeAnswerDimensionScore.ExamineeAnswerID = field.NewString(tableName, "examinee_answer_id")
	_examineeAnswerDimensionScore.DimensionID = field.NewString(tableName, "dimension_id")
	_examineeAnswerDimensionScore.DimensionRawScore = field.NewFloat64(tableName, "dimension_raw_score")
	_examineeAnswerDimensionScore.DimensionStandardScore = field.NewFloat64(tableName, "dimension_standard_score")
	_examineeAnswerDimensionScore.CreatedAt = field.NewTime(tableName, "created_at")
	_examineeAnswerDimensionScore.UpdatedAt = field.NewTime(tableName, "updated_at")
	_examineeAnswerDimensionScore.CreatedBy = field.NewString(tableName, "created_by")
	_examineeAnswerDimensionScore.UpdatedBy = field.NewString(tableName, "updated_by")
	_examineeAnswerDimensionScore.DeletedAt = field.NewField(tableName, "deleted_at")

	_examineeAnswerDimensionScore.fillFieldMap()

	return _examineeAnswerDimensionScore
}

// examineeAnswerDimensionScore 记录答卷维度总分
type examineeAnswerDimensionScore struct {
	examineeAnswerDimensionScoreDo

	ALL                    field.Asterisk
	ID                     field.String  // 主键
	ExamineeAnswerID       field.String  // ExamineeAnswer表外键
	DimensionID            field.String  // Dimension表的ID
	DimensionRawScore      field.Float64 // 维度原始分
	DimensionStandardScore field.Float64 // 维度标准分
	CreatedAt              field.Time    // 创建时间
	UpdatedAt              field.Time    // 更新时间
	CreatedBy              field.String  // 创建人标识
	UpdatedBy              field.String  // 更新人标识
	DeletedAt              field.Field   // 逻辑删除时间

	fieldMap map[string]field.Expr
}

func (e examineeAnswerDimensionScore) Table(newTableName string) *examineeAnswerDimensionScore {
	e.examineeAnswerDimensionScoreDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e examineeAnswerDimensionScore) As(alias string) *examineeAnswerDimensionScore {
	e.examineeAnswerDimensionScoreDo.DO = *(e.examineeAnswerDimensionScoreDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *examineeAnswerDimensionScore) updateTableName(table string) *examineeAnswerDimensionScore {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.ExamineeAnswerID = field.NewString(table, "examinee_answer_id")
	e.DimensionID = field.NewString(table, "dimension_id")
	e.DimensionRawScore = field.NewFloat64(table, "dimension_raw_score")
	e.DimensionStandardScore = field.NewFloat64(table, "dimension_standard_score")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.CreatedBy = field.NewString(table, "created_by")
	e.UpdatedBy = field.NewString(table, "updated_by")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *examineeAnswerDimensionScore) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *examineeAnswerDimensionScore) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["id"] = e.ID
	e.fieldMap["examinee_answer_id"] = e.ExamineeAnswerID
	e.fieldMap["dimension_id"] = e.DimensionID
	e.fieldMap["dimension_raw_score"] = e.DimensionRawScore
	e.fieldMap["dimension_standard_score"] = e.DimensionStandardScore
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e examineeAnswerDimensionScore) clone(db *gorm.DB) examineeAnswerDimensionScore {
	e.examineeAnswerDimensionScoreDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e examineeAnswerDimensionScore) replaceDB(db *gorm.DB) examineeAnswerDimensionScore {
	e.examineeAnswerDimensionScoreDo.ReplaceDB(db)
	return e
}

type examineeAnswerDimensionScoreDo struct{ gen.DO }

func (e examineeAnswerDimensionScoreDo) Debug() *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Debug())
}

func (e examineeAnswerDimensionScoreDo) WithContext(ctx context.Context) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e examineeAnswerDimensionScoreDo) ReadDB() *examineeAnswerDimensionScoreDo {
	return e.Clauses(dbresolver.Read)
}

func (e examineeAnswerDimensionScoreDo) WriteDB() *examineeAnswerDimensionScoreDo {
	return e.Clauses(dbresolver.Write)
}

func (e examineeAnswerDimensionScoreDo) Session(config *gorm.Session) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Session(config))
}

func (e examineeAnswerDimensionScoreDo) Clauses(conds ...clause.Expression) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e examineeAnswerDimensionScoreDo) Returning(value interface{}, columns ...string) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e examineeAnswerDimensionScoreDo) Not(conds ...gen.Condition) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e examineeAnswerDimensionScoreDo) Or(conds ...gen.Condition) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e examineeAnswerDimensionScoreDo) Select(conds ...field.Expr) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e examineeAnswerDimensionScoreDo) Where(conds ...gen.Condition) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e examineeAnswerDimensionScoreDo) Order(conds ...field.Expr) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e examineeAnswerDimensionScoreDo) Distinct(cols ...field.Expr) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e examineeAnswerDimensionScoreDo) Omit(cols ...field.Expr) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e examineeAnswerDimensionScoreDo) Join(table schema.Tabler, on ...field.Expr) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e examineeAnswerDimensionScoreDo) LeftJoin(table schema.Tabler, on ...field.Expr) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e examineeAnswerDimensionScoreDo) RightJoin(table schema.Tabler, on ...field.Expr) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e examineeAnswerDimensionScoreDo) Group(cols ...field.Expr) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e examineeAnswerDimensionScoreDo) Having(conds ...gen.Condition) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e examineeAnswerDimensionScoreDo) Limit(limit int) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e examineeAnswerDimensionScoreDo) Offset(offset int) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e examineeAnswerDimensionScoreDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e examineeAnswerDimensionScoreDo) Unscoped() *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Unscoped())
}

func (e examineeAnswerDimensionScoreDo) Create(values ...*entity.ExamineeAnswerDimensionScore) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e examineeAnswerDimensionScoreDo) CreateInBatches(values []*entity.ExamineeAnswerDimensionScore, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e examineeAnswerDimensionScoreDo) Save(values ...*entity.ExamineeAnswerDimensionScore) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e examineeAnswerDimensionScoreDo) First() (*entity.ExamineeAnswerDimensionScore, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeAnswerDimensionScore), nil
	}
}

func (e examineeAnswerDimensionScoreDo) Take() (*entity.ExamineeAnswerDimensionScore, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeAnswerDimensionScore), nil
	}
}

func (e examineeAnswerDimensionScoreDo) Last() (*entity.ExamineeAnswerDimensionScore, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeAnswerDimensionScore), nil
	}
}

func (e examineeAnswerDimensionScoreDo) Find() ([]*entity.ExamineeAnswerDimensionScore, error) {
	result, err := e.DO.Find()
	return result.([]*entity.ExamineeAnswerDimensionScore), err
}

func (e examineeAnswerDimensionScoreDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ExamineeAnswerDimensionScore, err error) {
	buf := make([]*entity.ExamineeAnswerDimensionScore, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e examineeAnswerDimensionScoreDo) FindInBatches(result *[]*entity.ExamineeAnswerDimensionScore, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e examineeAnswerDimensionScoreDo) Attrs(attrs ...field.AssignExpr) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e examineeAnswerDimensionScoreDo) Assign(attrs ...field.AssignExpr) *examineeAnswerDimensionScoreDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e examineeAnswerDimensionScoreDo) Joins(fields ...field.RelationField) *examineeAnswerDimensionScoreDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e examineeAnswerDimensionScoreDo) Preload(fields ...field.RelationField) *examineeAnswerDimensionScoreDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e examineeAnswerDimensionScoreDo) FirstOrInit() (*entity.ExamineeAnswerDimensionScore, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeAnswerDimensionScore), nil
	}
}

func (e examineeAnswerDimensionScoreDo) FirstOrCreate() (*entity.ExamineeAnswerDimensionScore, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeAnswerDimensionScore), nil
	}
}

func (e examineeAnswerDimensionScoreDo) FindByPage(offset int, limit int) (result []*entity.ExamineeAnswerDimensionScore, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e examineeAnswerDimensionScoreDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e examineeAnswerDimensionScoreDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e examineeAnswerDimensionScoreDo) Delete(models ...*entity.ExamineeAnswerDimensionScore) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *examineeAnswerDimensionScoreDo) withDO(do gen.Dao) *examineeAnswerDimensionScoreDo {
	e.DO = *do.(*gen.DO)
	return e
}
