// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package exam_api

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"exam_api/internal/data/entity"
)

func newExaminee(db *gorm.DB, opts ...gen.DOOption) examinee {
	_examinee := examinee{}

	_examinee.examineeDo.UseDB(db, opts...)
	_examinee.examineeDo.UseModel(&entity.Examinee{})

	tableName := _examinee.examineeDo.TableName()
	_examinee.ALL = field.NewAsterisk(tableName)
	_examinee.ID = field.NewString(tableName, "id")
	_examinee.UserName = field.NewString(tableName, "user_name")
	_examinee.HashPassword = field.NewString(tableName, "hash_password")
	_examinee.Status = field.NewInt32(tableName, "status")
	_examinee.Email = field.NewString(tableName, "email")
	_examinee.Phone = field.NewString(tableName, "phone")
	_examinee.CreatedAt = field.NewTime(tableName, "created_at")
	_examinee.UpdatedAt = field.NewTime(tableName, "updated_at")
	_examinee.CreatedBy = field.NewString(tableName, "created_by")
	_examinee.UpdatedBy = field.NewString(tableName, "updated_by")
	_examinee.DeletedAt = field.NewField(tableName, "deleted_at")

	_examinee.fillFieldMap()

	return _examinee
}

// examinee 正式参加测评的考生
type examinee struct {
	examineeDo

	ALL          field.Asterisk
	ID           field.String // 主键（Guid）
	UserName     field.String // 用户名
	HashPassword field.String // 密码
	Status       field.Int32  // 状态：1.已激活;0.未激活
	Email        field.String // 邮箱
	Phone        field.String // 电话
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间
	CreatedBy    field.String // 创建人标识
	UpdatedBy    field.String // 更新人标识
	DeletedAt    field.Field  // 逻辑删除时间

	fieldMap map[string]field.Expr
}

func (e examinee) Table(newTableName string) *examinee {
	e.examineeDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e examinee) As(alias string) *examinee {
	e.examineeDo.DO = *(e.examineeDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *examinee) updateTableName(table string) *examinee {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.UserName = field.NewString(table, "user_name")
	e.HashPassword = field.NewString(table, "hash_password")
	e.Status = field.NewInt32(table, "status")
	e.Email = field.NewString(table, "email")
	e.Phone = field.NewString(table, "phone")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.CreatedBy = field.NewString(table, "created_by")
	e.UpdatedBy = field.NewString(table, "updated_by")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *examinee) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *examinee) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 11)
	e.fieldMap["id"] = e.ID
	e.fieldMap["user_name"] = e.UserName
	e.fieldMap["hash_password"] = e.HashPassword
	e.fieldMap["status"] = e.Status
	e.fieldMap["email"] = e.Email
	e.fieldMap["phone"] = e.Phone
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e examinee) clone(db *gorm.DB) examinee {
	e.examineeDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e examinee) replaceDB(db *gorm.DB) examinee {
	e.examineeDo.ReplaceDB(db)
	return e
}

type examineeDo struct{ gen.DO }

func (e examineeDo) Debug() *examineeDo {
	return e.withDO(e.DO.Debug())
}

func (e examineeDo) WithContext(ctx context.Context) *examineeDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e examineeDo) ReadDB() *examineeDo {
	return e.Clauses(dbresolver.Read)
}

func (e examineeDo) WriteDB() *examineeDo {
	return e.Clauses(dbresolver.Write)
}

func (e examineeDo) Session(config *gorm.Session) *examineeDo {
	return e.withDO(e.DO.Session(config))
}

func (e examineeDo) Clauses(conds ...clause.Expression) *examineeDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e examineeDo) Returning(value interface{}, columns ...string) *examineeDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e examineeDo) Not(conds ...gen.Condition) *examineeDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e examineeDo) Or(conds ...gen.Condition) *examineeDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e examineeDo) Select(conds ...field.Expr) *examineeDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e examineeDo) Where(conds ...gen.Condition) *examineeDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e examineeDo) Order(conds ...field.Expr) *examineeDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e examineeDo) Distinct(cols ...field.Expr) *examineeDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e examineeDo) Omit(cols ...field.Expr) *examineeDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e examineeDo) Join(table schema.Tabler, on ...field.Expr) *examineeDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e examineeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *examineeDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e examineeDo) RightJoin(table schema.Tabler, on ...field.Expr) *examineeDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e examineeDo) Group(cols ...field.Expr) *examineeDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e examineeDo) Having(conds ...gen.Condition) *examineeDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e examineeDo) Limit(limit int) *examineeDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e examineeDo) Offset(offset int) *examineeDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e examineeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *examineeDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e examineeDo) Unscoped() *examineeDo {
	return e.withDO(e.DO.Unscoped())
}

func (e examineeDo) Create(values ...*entity.Examinee) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e examineeDo) CreateInBatches(values []*entity.Examinee, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e examineeDo) Save(values ...*entity.Examinee) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e examineeDo) First() (*entity.Examinee, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Examinee), nil
	}
}

func (e examineeDo) Take() (*entity.Examinee, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Examinee), nil
	}
}

func (e examineeDo) Last() (*entity.Examinee, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Examinee), nil
	}
}

func (e examineeDo) Find() ([]*entity.Examinee, error) {
	result, err := e.DO.Find()
	return result.([]*entity.Examinee), err
}

func (e examineeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Examinee, err error) {
	buf := make([]*entity.Examinee, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e examineeDo) FindInBatches(result *[]*entity.Examinee, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e examineeDo) Attrs(attrs ...field.AssignExpr) *examineeDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e examineeDo) Assign(attrs ...field.AssignExpr) *examineeDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e examineeDo) Joins(fields ...field.RelationField) *examineeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e examineeDo) Preload(fields ...field.RelationField) *examineeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e examineeDo) FirstOrInit() (*entity.Examinee, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Examinee), nil
	}
}

func (e examineeDo) FirstOrCreate() (*entity.Examinee, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Examinee), nil
	}
}

func (e examineeDo) FindByPage(offset int, limit int) (result []*entity.Examinee, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e examineeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e examineeDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e examineeDo) Delete(models ...*entity.Examinee) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *examineeDo) withDO(do gen.Dao) *examineeDo {
	e.DO = *do.(*gen.DO)
	return e
}
