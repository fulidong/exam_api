// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package exam_api

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                            db,
		Administrator:                 newAdministrator(db, opts...),
		Examinee:                      newExaminee(db, opts...),
		ExamineeAnswer:                newExamineeAnswer(db, opts...),
		ExamineeAnswerDimensionScore:  newExamineeAnswerDimensionScore(db, opts...),
		ExamineeAnswerQuestionAnswer:  newExamineeAnswerQuestionAnswer(db, opts...),
		ExamineeEmailRecord:           newExamineeEmailRecord(db, opts...),
		ExamineeSalesPaperAssociation: newExamineeSalesPaperAssociation(db, opts...),
		Question:                      newQuestion(db, opts...),
		QuestionOption:                newQuestionOption(db, opts...),
		SalesPaper:                    newSalesPaper(db, opts...),
		SalesPaperComment:             newSalesPaperComment(db, opts...),
		SalesPaperDimension:           newSalesPaperDimension(db, opts...),
		SalesPaperDimensionComment:    newSalesPaperDimensionComment(db, opts...),
		SysLoginRecord:                newSysLoginRecord(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Administrator                 administrator
	Examinee                      examinee
	ExamineeAnswer                examineeAnswer
	ExamineeAnswerDimensionScore  examineeAnswerDimensionScore
	ExamineeAnswerQuestionAnswer  examineeAnswerQuestionAnswer
	ExamineeEmailRecord           examineeEmailRecord
	ExamineeSalesPaperAssociation examineeSalesPaperAssociation
	Question                      question
	QuestionOption                questionOption
	SalesPaper                    salesPaper
	SalesPaperComment             salesPaperComment
	SalesPaperDimension           salesPaperDimension
	SalesPaperDimensionComment    salesPaperDimensionComment
	SysLoginRecord                sysLoginRecord
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                            db,
		Administrator:                 q.Administrator.clone(db),
		Examinee:                      q.Examinee.clone(db),
		ExamineeAnswer:                q.ExamineeAnswer.clone(db),
		ExamineeAnswerDimensionScore:  q.ExamineeAnswerDimensionScore.clone(db),
		ExamineeAnswerQuestionAnswer:  q.ExamineeAnswerQuestionAnswer.clone(db),
		ExamineeEmailRecord:           q.ExamineeEmailRecord.clone(db),
		ExamineeSalesPaperAssociation: q.ExamineeSalesPaperAssociation.clone(db),
		Question:                      q.Question.clone(db),
		QuestionOption:                q.QuestionOption.clone(db),
		SalesPaper:                    q.SalesPaper.clone(db),
		SalesPaperComment:             q.SalesPaperComment.clone(db),
		SalesPaperDimension:           q.SalesPaperDimension.clone(db),
		SalesPaperDimensionComment:    q.SalesPaperDimensionComment.clone(db),
		SysLoginRecord:                q.SysLoginRecord.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                            db,
		Administrator:                 q.Administrator.replaceDB(db),
		Examinee:                      q.Examinee.replaceDB(db),
		ExamineeAnswer:                q.ExamineeAnswer.replaceDB(db),
		ExamineeAnswerDimensionScore:  q.ExamineeAnswerDimensionScore.replaceDB(db),
		ExamineeAnswerQuestionAnswer:  q.ExamineeAnswerQuestionAnswer.replaceDB(db),
		ExamineeEmailRecord:           q.ExamineeEmailRecord.replaceDB(db),
		ExamineeSalesPaperAssociation: q.ExamineeSalesPaperAssociation.replaceDB(db),
		Question:                      q.Question.replaceDB(db),
		QuestionOption:                q.QuestionOption.replaceDB(db),
		SalesPaper:                    q.SalesPaper.replaceDB(db),
		SalesPaperComment:             q.SalesPaperComment.replaceDB(db),
		SalesPaperDimension:           q.SalesPaperDimension.replaceDB(db),
		SalesPaperDimensionComment:    q.SalesPaperDimensionComment.replaceDB(db),
		SysLoginRecord:                q.SysLoginRecord.replaceDB(db),
	}
}

type queryCtx struct {
	Administrator                 *administratorDo
	Examinee                      *examineeDo
	ExamineeAnswer                *examineeAnswerDo
	ExamineeAnswerDimensionScore  *examineeAnswerDimensionScoreDo
	ExamineeAnswerQuestionAnswer  *examineeAnswerQuestionAnswerDo
	ExamineeEmailRecord           *examineeEmailRecordDo
	ExamineeSalesPaperAssociation *examineeSalesPaperAssociationDo
	Question                      *questionDo
	QuestionOption                *questionOptionDo
	SalesPaper                    *salesPaperDo
	SalesPaperComment             *salesPaperCommentDo
	SalesPaperDimension           *salesPaperDimensionDo
	SalesPaperDimensionComment    *salesPaperDimensionCommentDo
	SysLoginRecord                *sysLoginRecordDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Administrator:                 q.Administrator.WithContext(ctx),
		Examinee:                      q.Examinee.WithContext(ctx),
		ExamineeAnswer:                q.ExamineeAnswer.WithContext(ctx),
		ExamineeAnswerDimensionScore:  q.ExamineeAnswerDimensionScore.WithContext(ctx),
		ExamineeAnswerQuestionAnswer:  q.ExamineeAnswerQuestionAnswer.WithContext(ctx),
		ExamineeEmailRecord:           q.ExamineeEmailRecord.WithContext(ctx),
		ExamineeSalesPaperAssociation: q.ExamineeSalesPaperAssociation.WithContext(ctx),
		Question:                      q.Question.WithContext(ctx),
		QuestionOption:                q.QuestionOption.WithContext(ctx),
		SalesPaper:                    q.SalesPaper.WithContext(ctx),
		SalesPaperComment:             q.SalesPaperComment.WithContext(ctx),
		SalesPaperDimension:           q.SalesPaperDimension.WithContext(ctx),
		SalesPaperDimensionComment:    q.SalesPaperDimensionComment.WithContext(ctx),
		SysLoginRecord:                q.SysLoginRecord.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
