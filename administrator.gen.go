// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package exam_api

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"exam_api/internal/data/entity"
)

func newAdministrator(db *gorm.DB, opts ...gen.DOOption) administrator {
	_administrator := administrator{}

	_administrator.administratorDo.UseDB(db, opts...)
	_administrator.administratorDo.UseModel(&entity.Administrator{})

	tableName := _administrator.administratorDo.TableName()
	_administrator.ALL = field.NewAsterisk(tableName)
	_administrator.ID = field.NewString(tableName, "id")
	_administrator.UserName = field.NewString(tableName, "user_name")
	_administrator.LoginAccount = field.NewString(tableName, "login_account")
	_administrator.HashPassword = field.NewString(tableName, "hash_password")
	_administrator.Status = field.NewInt32(tableName, "status")
	_administrator.Email = field.NewString(tableName, "email")
	_administrator.UserType = field.NewInt32(tableName, "user_type")
	_administrator.CreatedAt = field.NewTime(tableName, "created_at")
	_administrator.UpdatedAt = field.NewTime(tableName, "updated_at")
	_administrator.CreatedBy = field.NewString(tableName, "created_by")
	_administrator.UpdatedBy = field.NewString(tableName, "updated_by")
	_administrator.DeletedAt = field.NewField(tableName, "deleted_at")

	_administrator.fillFieldMap()

	return _administrator
}

// administrator 测评管理员用户
type administrator struct {
	administratorDo

	ALL          field.Asterisk
	ID           field.String // 主键
	UserName     field.String // 用户名
	LoginAccount field.String // 登录名
	HashPassword field.String // 密码
	Status       field.Int32  // 状态：1.已激活;0.未激活
	Email        field.String // 邮箱
	UserType     field.Int32  // 用户类型（0、管理员，1、普通用户）
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间
	CreatedBy    field.String // 创建人标识
	UpdatedBy    field.String // 更新人标识
	DeletedAt    field.Field  // 逻辑删除时间

	fieldMap map[string]field.Expr
}

func (a administrator) Table(newTableName string) *administrator {
	a.administratorDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a administrator) As(alias string) *administrator {
	a.administratorDo.DO = *(a.administratorDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *administrator) updateTableName(table string) *administrator {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.UserName = field.NewString(table, "user_name")
	a.LoginAccount = field.NewString(table, "login_account")
	a.HashPassword = field.NewString(table, "hash_password")
	a.Status = field.NewInt32(table, "status")
	a.Email = field.NewString(table, "email")
	a.UserType = field.NewInt32(table, "user_type")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.CreatedBy = field.NewString(table, "created_by")
	a.UpdatedBy = field.NewString(table, "updated_by")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *administrator) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *administrator) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_name"] = a.UserName
	a.fieldMap["login_account"] = a.LoginAccount
	a.fieldMap["hash_password"] = a.HashPassword
	a.fieldMap["status"] = a.Status
	a.fieldMap["email"] = a.Email
	a.fieldMap["user_type"] = a.UserType
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["created_by"] = a.CreatedBy
	a.fieldMap["updated_by"] = a.UpdatedBy
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a administrator) clone(db *gorm.DB) administrator {
	a.administratorDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a administrator) replaceDB(db *gorm.DB) administrator {
	a.administratorDo.ReplaceDB(db)
	return a
}

type administratorDo struct{ gen.DO }

func (a administratorDo) Debug() *administratorDo {
	return a.withDO(a.DO.Debug())
}

func (a administratorDo) WithContext(ctx context.Context) *administratorDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a administratorDo) ReadDB() *administratorDo {
	return a.Clauses(dbresolver.Read)
}

func (a administratorDo) WriteDB() *administratorDo {
	return a.Clauses(dbresolver.Write)
}

func (a administratorDo) Session(config *gorm.Session) *administratorDo {
	return a.withDO(a.DO.Session(config))
}

func (a administratorDo) Clauses(conds ...clause.Expression) *administratorDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a administratorDo) Returning(value interface{}, columns ...string) *administratorDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a administratorDo) Not(conds ...gen.Condition) *administratorDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a administratorDo) Or(conds ...gen.Condition) *administratorDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a administratorDo) Select(conds ...field.Expr) *administratorDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a administratorDo) Where(conds ...gen.Condition) *administratorDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a administratorDo) Order(conds ...field.Expr) *administratorDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a administratorDo) Distinct(cols ...field.Expr) *administratorDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a administratorDo) Omit(cols ...field.Expr) *administratorDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a administratorDo) Join(table schema.Tabler, on ...field.Expr) *administratorDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a administratorDo) LeftJoin(table schema.Tabler, on ...field.Expr) *administratorDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a administratorDo) RightJoin(table schema.Tabler, on ...field.Expr) *administratorDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a administratorDo) Group(cols ...field.Expr) *administratorDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a administratorDo) Having(conds ...gen.Condition) *administratorDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a administratorDo) Limit(limit int) *administratorDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a administratorDo) Offset(offset int) *administratorDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a administratorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *administratorDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a administratorDo) Unscoped() *administratorDo {
	return a.withDO(a.DO.Unscoped())
}

func (a administratorDo) Create(values ...*entity.Administrator) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a administratorDo) CreateInBatches(values []*entity.Administrator, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a administratorDo) Save(values ...*entity.Administrator) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a administratorDo) First() (*entity.Administrator, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Administrator), nil
	}
}

func (a administratorDo) Take() (*entity.Administrator, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Administrator), nil
	}
}

func (a administratorDo) Last() (*entity.Administrator, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Administrator), nil
	}
}

func (a administratorDo) Find() ([]*entity.Administrator, error) {
	result, err := a.DO.Find()
	return result.([]*entity.Administrator), err
}

func (a administratorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Administrator, err error) {
	buf := make([]*entity.Administrator, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a administratorDo) FindInBatches(result *[]*entity.Administrator, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a administratorDo) Attrs(attrs ...field.AssignExpr) *administratorDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a administratorDo) Assign(attrs ...field.AssignExpr) *administratorDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a administratorDo) Joins(fields ...field.RelationField) *administratorDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a administratorDo) Preload(fields ...field.RelationField) *administratorDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a administratorDo) FirstOrInit() (*entity.Administrator, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Administrator), nil
	}
}

func (a administratorDo) FirstOrCreate() (*entity.Administrator, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Administrator), nil
	}
}

func (a administratorDo) FindByPage(offset int, limit int) (result []*entity.Administrator, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a administratorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a administratorDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a administratorDo) Delete(models ...*entity.Administrator) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *administratorDo) withDO(do gen.Dao) *administratorDo {
	a.DO = *do.(*gen.DO)
	return a
}
