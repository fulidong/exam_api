// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package exam_api

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"exam_api/internal/data/entity"
)

func newSalesPaperDimensionComment(db *gorm.DB, opts ...gen.DOOption) salesPaperDimensionComment {
	_salesPaperDimensionComment := salesPaperDimensionComment{}

	_salesPaperDimensionComment.salesPaperDimensionCommentDo.UseDB(db, opts...)
	_salesPaperDimensionComment.salesPaperDimensionCommentDo.UseModel(&entity.SalesPaperDimensionComment{})

	tableName := _salesPaperDimensionComment.salesPaperDimensionCommentDo.TableName()
	_salesPaperDimensionComment.ALL = field.NewAsterisk(tableName)
	_salesPaperDimensionComment.ID = field.NewString(tableName, "id")
	_salesPaperDimensionComment.SalesPaperDimensionID = field.NewString(tableName, "sales_paper_dimension_id")
	_salesPaperDimensionComment.LowScore = field.NewFloat64(tableName, "low_score")
	_salesPaperDimensionComment.UpScore = field.NewFloat64(tableName, "up_score")
	_salesPaperDimensionComment.Content = field.NewString(tableName, "content")
	_salesPaperDimensionComment.CreatedAt = field.NewTime(tableName, "created_at")
	_salesPaperDimensionComment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_salesPaperDimensionComment.CreatedBy = field.NewString(tableName, "created_by")
	_salesPaperDimensionComment.UpdatedBy = field.NewString(tableName, "updated_by")
	_salesPaperDimensionComment.DeletedAt = field.NewField(tableName, "deleted_at")

	_salesPaperDimensionComment.fillFieldMap()

	return _salesPaperDimensionComment
}

// salesPaperDimensionComment 维度评语表
type salesPaperDimensionComment struct {
	salesPaperDimensionCommentDo

	ALL                   field.Asterisk
	ID                    field.String  // 主键
	SalesPaperDimensionID field.String  // SalesPaperDimension表的外键
	LowScore              field.Float64 // 分数下限
	UpScore               field.Float64 // 分数上限
	Content               field.String  // 评语
	CreatedAt             field.Time    // 创建时间
	UpdatedAt             field.Time    // 更新时间
	CreatedBy             field.String  // 创建人标识
	UpdatedBy             field.String  // 更新人标识
	DeletedAt             field.Field   // 逻辑删除时间

	fieldMap map[string]field.Expr
}

func (s salesPaperDimensionComment) Table(newTableName string) *salesPaperDimensionComment {
	s.salesPaperDimensionCommentDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s salesPaperDimensionComment) As(alias string) *salesPaperDimensionComment {
	s.salesPaperDimensionCommentDo.DO = *(s.salesPaperDimensionCommentDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *salesPaperDimensionComment) updateTableName(table string) *salesPaperDimensionComment {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.SalesPaperDimensionID = field.NewString(table, "sales_paper_dimension_id")
	s.LowScore = field.NewFloat64(table, "low_score")
	s.UpScore = field.NewFloat64(table, "up_score")
	s.Content = field.NewString(table, "content")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.CreatedBy = field.NewString(table, "created_by")
	s.UpdatedBy = field.NewString(table, "updated_by")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *salesPaperDimensionComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *salesPaperDimensionComment) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sales_paper_dimension_id"] = s.SalesPaperDimensionID
	s.fieldMap["low_score"] = s.LowScore
	s.fieldMap["up_score"] = s.UpScore
	s.fieldMap["content"] = s.Content
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_by"] = s.UpdatedBy
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s salesPaperDimensionComment) clone(db *gorm.DB) salesPaperDimensionComment {
	s.salesPaperDimensionCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s salesPaperDimensionComment) replaceDB(db *gorm.DB) salesPaperDimensionComment {
	s.salesPaperDimensionCommentDo.ReplaceDB(db)
	return s
}

type salesPaperDimensionCommentDo struct{ gen.DO }

func (s salesPaperDimensionCommentDo) Debug() *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Debug())
}

func (s salesPaperDimensionCommentDo) WithContext(ctx context.Context) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s salesPaperDimensionCommentDo) ReadDB() *salesPaperDimensionCommentDo {
	return s.Clauses(dbresolver.Read)
}

func (s salesPaperDimensionCommentDo) WriteDB() *salesPaperDimensionCommentDo {
	return s.Clauses(dbresolver.Write)
}

func (s salesPaperDimensionCommentDo) Session(config *gorm.Session) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Session(config))
}

func (s salesPaperDimensionCommentDo) Clauses(conds ...clause.Expression) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s salesPaperDimensionCommentDo) Returning(value interface{}, columns ...string) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s salesPaperDimensionCommentDo) Not(conds ...gen.Condition) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s salesPaperDimensionCommentDo) Or(conds ...gen.Condition) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s salesPaperDimensionCommentDo) Select(conds ...field.Expr) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s salesPaperDimensionCommentDo) Where(conds ...gen.Condition) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s salesPaperDimensionCommentDo) Order(conds ...field.Expr) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s salesPaperDimensionCommentDo) Distinct(cols ...field.Expr) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s salesPaperDimensionCommentDo) Omit(cols ...field.Expr) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s salesPaperDimensionCommentDo) Join(table schema.Tabler, on ...field.Expr) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s salesPaperDimensionCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s salesPaperDimensionCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s salesPaperDimensionCommentDo) Group(cols ...field.Expr) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s salesPaperDimensionCommentDo) Having(conds ...gen.Condition) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s salesPaperDimensionCommentDo) Limit(limit int) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s salesPaperDimensionCommentDo) Offset(offset int) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s salesPaperDimensionCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s salesPaperDimensionCommentDo) Unscoped() *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Unscoped())
}

func (s salesPaperDimensionCommentDo) Create(values ...*entity.SalesPaperDimensionComment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s salesPaperDimensionCommentDo) CreateInBatches(values []*entity.SalesPaperDimensionComment, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s salesPaperDimensionCommentDo) Save(values ...*entity.SalesPaperDimensionComment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s salesPaperDimensionCommentDo) First() (*entity.SalesPaperDimensionComment, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaperDimensionComment), nil
	}
}

func (s salesPaperDimensionCommentDo) Take() (*entity.SalesPaperDimensionComment, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaperDimensionComment), nil
	}
}

func (s salesPaperDimensionCommentDo) Last() (*entity.SalesPaperDimensionComment, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaperDimensionComment), nil
	}
}

func (s salesPaperDimensionCommentDo) Find() ([]*entity.SalesPaperDimensionComment, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SalesPaperDimensionComment), err
}

func (s salesPaperDimensionCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SalesPaperDimensionComment, err error) {
	buf := make([]*entity.SalesPaperDimensionComment, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s salesPaperDimensionCommentDo) FindInBatches(result *[]*entity.SalesPaperDimensionComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s salesPaperDimensionCommentDo) Attrs(attrs ...field.AssignExpr) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s salesPaperDimensionCommentDo) Assign(attrs ...field.AssignExpr) *salesPaperDimensionCommentDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s salesPaperDimensionCommentDo) Joins(fields ...field.RelationField) *salesPaperDimensionCommentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s salesPaperDimensionCommentDo) Preload(fields ...field.RelationField) *salesPaperDimensionCommentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s salesPaperDimensionCommentDo) FirstOrInit() (*entity.SalesPaperDimensionComment, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaperDimensionComment), nil
	}
}

func (s salesPaperDimensionCommentDo) FirstOrCreate() (*entity.SalesPaperDimensionComment, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaperDimensionComment), nil
	}
}

func (s salesPaperDimensionCommentDo) FindByPage(offset int, limit int) (result []*entity.SalesPaperDimensionComment, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s salesPaperDimensionCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s salesPaperDimensionCommentDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s salesPaperDimensionCommentDo) Delete(models ...*entity.SalesPaperDimensionComment) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *salesPaperDimensionCommentDo) withDO(do gen.Dao) *salesPaperDimensionCommentDo {
	s.DO = *do.(*gen.DO)
	return s
}
