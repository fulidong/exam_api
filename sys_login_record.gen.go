// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package exam_api

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"exam_api/internal/data/entity"
)

func newSysLoginRecord(db *gorm.DB, opts ...gen.DOOption) sysLoginRecord {
	_sysLoginRecord := sysLoginRecord{}

	_sysLoginRecord.sysLoginRecordDo.UseDB(db, opts...)
	_sysLoginRecord.sysLoginRecordDo.UseModel(&entity.SysLoginRecord{})

	tableName := _sysLoginRecord.sysLoginRecordDo.TableName()
	_sysLoginRecord.ALL = field.NewAsterisk(tableName)
	_sysLoginRecord.ID = field.NewString(tableName, "id")
	_sysLoginRecord.UserID = field.NewString(tableName, "user_id")
	_sysLoginRecord.LoginPlatform = field.NewInt32(tableName, "login_platform")
	_sysLoginRecord.CreatedAt = field.NewTime(tableName, "created_at")

	_sysLoginRecord.fillFieldMap()

	return _sysLoginRecord
}

// sysLoginRecord 登录日志
type sysLoginRecord struct {
	sysLoginRecordDo

	ALL           field.Asterisk
	ID            field.String // 主键
	UserID        field.String // 记录登录者ID
	LoginPlatform field.Int32  // 登录平台: 1.企业后台 2.候选
	CreatedAt     field.Time   // 登录时间

	fieldMap map[string]field.Expr
}

func (s sysLoginRecord) Table(newTableName string) *sysLoginRecord {
	s.sysLoginRecordDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysLoginRecord) As(alias string) *sysLoginRecord {
	s.sysLoginRecordDo.DO = *(s.sysLoginRecordDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysLoginRecord) updateTableName(table string) *sysLoginRecord {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.LoginPlatform = field.NewInt32(table, "login_platform")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *sysLoginRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysLoginRecord) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["login_platform"] = s.LoginPlatform
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s sysLoginRecord) clone(db *gorm.DB) sysLoginRecord {
	s.sysLoginRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysLoginRecord) replaceDB(db *gorm.DB) sysLoginRecord {
	s.sysLoginRecordDo.ReplaceDB(db)
	return s
}

type sysLoginRecordDo struct{ gen.DO }

func (s sysLoginRecordDo) Debug() *sysLoginRecordDo {
	return s.withDO(s.DO.Debug())
}

func (s sysLoginRecordDo) WithContext(ctx context.Context) *sysLoginRecordDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysLoginRecordDo) ReadDB() *sysLoginRecordDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysLoginRecordDo) WriteDB() *sysLoginRecordDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysLoginRecordDo) Session(config *gorm.Session) *sysLoginRecordDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysLoginRecordDo) Clauses(conds ...clause.Expression) *sysLoginRecordDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysLoginRecordDo) Returning(value interface{}, columns ...string) *sysLoginRecordDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysLoginRecordDo) Not(conds ...gen.Condition) *sysLoginRecordDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysLoginRecordDo) Or(conds ...gen.Condition) *sysLoginRecordDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysLoginRecordDo) Select(conds ...field.Expr) *sysLoginRecordDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysLoginRecordDo) Where(conds ...gen.Condition) *sysLoginRecordDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysLoginRecordDo) Order(conds ...field.Expr) *sysLoginRecordDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysLoginRecordDo) Distinct(cols ...field.Expr) *sysLoginRecordDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysLoginRecordDo) Omit(cols ...field.Expr) *sysLoginRecordDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysLoginRecordDo) Join(table schema.Tabler, on ...field.Expr) *sysLoginRecordDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysLoginRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysLoginRecordDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysLoginRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysLoginRecordDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysLoginRecordDo) Group(cols ...field.Expr) *sysLoginRecordDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysLoginRecordDo) Having(conds ...gen.Condition) *sysLoginRecordDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysLoginRecordDo) Limit(limit int) *sysLoginRecordDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysLoginRecordDo) Offset(offset int) *sysLoginRecordDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysLoginRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysLoginRecordDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysLoginRecordDo) Unscoped() *sysLoginRecordDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysLoginRecordDo) Create(values ...*entity.SysLoginRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysLoginRecordDo) CreateInBatches(values []*entity.SysLoginRecord, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysLoginRecordDo) Save(values ...*entity.SysLoginRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysLoginRecordDo) First() (*entity.SysLoginRecord, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysLoginRecord), nil
	}
}

func (s sysLoginRecordDo) Take() (*entity.SysLoginRecord, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysLoginRecord), nil
	}
}

func (s sysLoginRecordDo) Last() (*entity.SysLoginRecord, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysLoginRecord), nil
	}
}

func (s sysLoginRecordDo) Find() ([]*entity.SysLoginRecord, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SysLoginRecord), err
}

func (s sysLoginRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysLoginRecord, err error) {
	buf := make([]*entity.SysLoginRecord, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysLoginRecordDo) FindInBatches(result *[]*entity.SysLoginRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysLoginRecordDo) Attrs(attrs ...field.AssignExpr) *sysLoginRecordDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysLoginRecordDo) Assign(attrs ...field.AssignExpr) *sysLoginRecordDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysLoginRecordDo) Joins(fields ...field.RelationField) *sysLoginRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysLoginRecordDo) Preload(fields ...field.RelationField) *sysLoginRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysLoginRecordDo) FirstOrInit() (*entity.SysLoginRecord, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysLoginRecord), nil
	}
}

func (s sysLoginRecordDo) FirstOrCreate() (*entity.SysLoginRecord, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysLoginRecord), nil
	}
}

func (s sysLoginRecordDo) FindByPage(offset int, limit int) (result []*entity.SysLoginRecord, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysLoginRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysLoginRecordDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysLoginRecordDo) Delete(models ...*entity.SysLoginRecord) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysLoginRecordDo) withDO(do gen.Dao) *sysLoginRecordDo {
	s.DO = *do.(*gen.DO)
	return s
}
