// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package exam_api

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"exam_api/internal/data/entity"
)

func newExamineeSalesPaperAssociation(db *gorm.DB, opts ...gen.DOOption) examineeSalesPaperAssociation {
	_examineeSalesPaperAssociation := examineeSalesPaperAssociation{}

	_examineeSalesPaperAssociation.examineeSalesPaperAssociationDo.UseDB(db, opts...)
	_examineeSalesPaperAssociation.examineeSalesPaperAssociationDo.UseModel(&entity.ExamineeSalesPaperAssociation{})

	tableName := _examineeSalesPaperAssociation.examineeSalesPaperAssociationDo.TableName()
	_examineeSalesPaperAssociation.ALL = field.NewAsterisk(tableName)
	_examineeSalesPaperAssociation.ID = field.NewString(tableName, "id")
	_examineeSalesPaperAssociation.SalesPaperID = field.NewString(tableName, "sales_paper_id")
	_examineeSalesPaperAssociation.SalesPaperName = field.NewString(tableName, "sales_paper_name")
	_examineeSalesPaperAssociation.ExamineeID = field.NewString(tableName, "examinee_id")
	_examineeSalesPaperAssociation.EmailStatus = field.NewInt32(tableName, "email_status")
	_examineeSalesPaperAssociation.ReportPath = field.NewString(tableName, "report_path")
	_examineeSalesPaperAssociation.StageNumber = field.NewInt32(tableName, "stage_number")
	_examineeSalesPaperAssociation.CreatedAt = field.NewTime(tableName, "created_at")
	_examineeSalesPaperAssociation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_examineeSalesPaperAssociation.CreatedBy = field.NewString(tableName, "created_by")
	_examineeSalesPaperAssociation.UpdatedBy = field.NewString(tableName, "updated_by")
	_examineeSalesPaperAssociation.DeletedAt = field.NewField(tableName, "deleted_at")

	_examineeSalesPaperAssociation.fillFieldMap()

	return _examineeSalesPaperAssociation
}

// examineeSalesPaperAssociation 正式参加测评的考生
type examineeSalesPaperAssociation struct {
	examineeSalesPaperAssociationDo

	ALL            field.Asterisk
	ID             field.String // 主键（Guid）
	SalesPaperID   field.String // SalesPaper表的外键
	SalesPaperName field.String // 考试名称
	ExamineeID     field.String // 关联考生ID
	EmailStatus    field.Int32  // 邮件状态：1.未发送，2.已发送，3.发送失败
	ReportPath     field.String // 答题报告路径
	StageNumber    field.Int32  // 阶段编号（0~4）
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间
	CreatedBy      field.String // 创建人标识
	UpdatedBy      field.String // 更新人标识
	DeletedAt      field.Field  // 逻辑删除时间

	fieldMap map[string]field.Expr
}

func (e examineeSalesPaperAssociation) Table(newTableName string) *examineeSalesPaperAssociation {
	e.examineeSalesPaperAssociationDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e examineeSalesPaperAssociation) As(alias string) *examineeSalesPaperAssociation {
	e.examineeSalesPaperAssociationDo.DO = *(e.examineeSalesPaperAssociationDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *examineeSalesPaperAssociation) updateTableName(table string) *examineeSalesPaperAssociation {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.SalesPaperID = field.NewString(table, "sales_paper_id")
	e.SalesPaperName = field.NewString(table, "sales_paper_name")
	e.ExamineeID = field.NewString(table, "examinee_id")
	e.EmailStatus = field.NewInt32(table, "email_status")
	e.ReportPath = field.NewString(table, "report_path")
	e.StageNumber = field.NewInt32(table, "stage_number")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.CreatedBy = field.NewString(table, "created_by")
	e.UpdatedBy = field.NewString(table, "updated_by")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *examineeSalesPaperAssociation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *examineeSalesPaperAssociation) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["sales_paper_id"] = e.SalesPaperID
	e.fieldMap["sales_paper_name"] = e.SalesPaperName
	e.fieldMap["examinee_id"] = e.ExamineeID
	e.fieldMap["email_status"] = e.EmailStatus
	e.fieldMap["report_path"] = e.ReportPath
	e.fieldMap["stage_number"] = e.StageNumber
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e examineeSalesPaperAssociation) clone(db *gorm.DB) examineeSalesPaperAssociation {
	e.examineeSalesPaperAssociationDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e examineeSalesPaperAssociation) replaceDB(db *gorm.DB) examineeSalesPaperAssociation {
	e.examineeSalesPaperAssociationDo.ReplaceDB(db)
	return e
}

type examineeSalesPaperAssociationDo struct{ gen.DO }

func (e examineeSalesPaperAssociationDo) Debug() *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Debug())
}

func (e examineeSalesPaperAssociationDo) WithContext(ctx context.Context) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e examineeSalesPaperAssociationDo) ReadDB() *examineeSalesPaperAssociationDo {
	return e.Clauses(dbresolver.Read)
}

func (e examineeSalesPaperAssociationDo) WriteDB() *examineeSalesPaperAssociationDo {
	return e.Clauses(dbresolver.Write)
}

func (e examineeSalesPaperAssociationDo) Session(config *gorm.Session) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Session(config))
}

func (e examineeSalesPaperAssociationDo) Clauses(conds ...clause.Expression) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e examineeSalesPaperAssociationDo) Returning(value interface{}, columns ...string) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e examineeSalesPaperAssociationDo) Not(conds ...gen.Condition) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e examineeSalesPaperAssociationDo) Or(conds ...gen.Condition) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e examineeSalesPaperAssociationDo) Select(conds ...field.Expr) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e examineeSalesPaperAssociationDo) Where(conds ...gen.Condition) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e examineeSalesPaperAssociationDo) Order(conds ...field.Expr) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e examineeSalesPaperAssociationDo) Distinct(cols ...field.Expr) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e examineeSalesPaperAssociationDo) Omit(cols ...field.Expr) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e examineeSalesPaperAssociationDo) Join(table schema.Tabler, on ...field.Expr) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e examineeSalesPaperAssociationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e examineeSalesPaperAssociationDo) RightJoin(table schema.Tabler, on ...field.Expr) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e examineeSalesPaperAssociationDo) Group(cols ...field.Expr) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e examineeSalesPaperAssociationDo) Having(conds ...gen.Condition) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e examineeSalesPaperAssociationDo) Limit(limit int) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e examineeSalesPaperAssociationDo) Offset(offset int) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e examineeSalesPaperAssociationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e examineeSalesPaperAssociationDo) Unscoped() *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Unscoped())
}

func (e examineeSalesPaperAssociationDo) Create(values ...*entity.ExamineeSalesPaperAssociation) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e examineeSalesPaperAssociationDo) CreateInBatches(values []*entity.ExamineeSalesPaperAssociation, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e examineeSalesPaperAssociationDo) Save(values ...*entity.ExamineeSalesPaperAssociation) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e examineeSalesPaperAssociationDo) First() (*entity.ExamineeSalesPaperAssociation, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeSalesPaperAssociation), nil
	}
}

func (e examineeSalesPaperAssociationDo) Take() (*entity.ExamineeSalesPaperAssociation, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeSalesPaperAssociation), nil
	}
}

func (e examineeSalesPaperAssociationDo) Last() (*entity.ExamineeSalesPaperAssociation, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeSalesPaperAssociation), nil
	}
}

func (e examineeSalesPaperAssociationDo) Find() ([]*entity.ExamineeSalesPaperAssociation, error) {
	result, err := e.DO.Find()
	return result.([]*entity.ExamineeSalesPaperAssociation), err
}

func (e examineeSalesPaperAssociationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ExamineeSalesPaperAssociation, err error) {
	buf := make([]*entity.ExamineeSalesPaperAssociation, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e examineeSalesPaperAssociationDo) FindInBatches(result *[]*entity.ExamineeSalesPaperAssociation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e examineeSalesPaperAssociationDo) Attrs(attrs ...field.AssignExpr) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e examineeSalesPaperAssociationDo) Assign(attrs ...field.AssignExpr) *examineeSalesPaperAssociationDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e examineeSalesPaperAssociationDo) Joins(fields ...field.RelationField) *examineeSalesPaperAssociationDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e examineeSalesPaperAssociationDo) Preload(fields ...field.RelationField) *examineeSalesPaperAssociationDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e examineeSalesPaperAssociationDo) FirstOrInit() (*entity.ExamineeSalesPaperAssociation, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeSalesPaperAssociation), nil
	}
}

func (e examineeSalesPaperAssociationDo) FirstOrCreate() (*entity.ExamineeSalesPaperAssociation, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeSalesPaperAssociation), nil
	}
}

func (e examineeSalesPaperAssociationDo) FindByPage(offset int, limit int) (result []*entity.ExamineeSalesPaperAssociation, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e examineeSalesPaperAssociationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e examineeSalesPaperAssociationDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e examineeSalesPaperAssociationDo) Delete(models ...*entity.ExamineeSalesPaperAssociation) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *examineeSalesPaperAssociationDo) withDO(do gen.Dao) *examineeSalesPaperAssociationDo {
	e.DO = *do.(*gen.DO)
	return e
}
