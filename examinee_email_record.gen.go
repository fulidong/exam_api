// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package exam_api

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"exam_api/internal/data/entity"
)

func newExamineeEmailRecord(db *gorm.DB, opts ...gen.DOOption) examineeEmailRecord {
	_examineeEmailRecord := examineeEmailRecord{}

	_examineeEmailRecord.examineeEmailRecordDo.UseDB(db, opts...)
	_examineeEmailRecord.examineeEmailRecordDo.UseModel(&entity.ExamineeEmailRecord{})

	tableName := _examineeEmailRecord.examineeEmailRecordDo.TableName()
	_examineeEmailRecord.ALL = field.NewAsterisk(tableName)
	_examineeEmailRecord.ID = field.NewString(tableName, "id")
	_examineeEmailRecord.SalesPaperID = field.NewString(tableName, "sales_paper_id")
	_examineeEmailRecord.ExamineeID = field.NewString(tableName, "examinee_id")
	_examineeEmailRecord.ExamineeSalesPaperAssociationID = field.NewString(tableName, "examinee_sales_paper_association_id")
	_examineeEmailRecord.Title = field.NewString(tableName, "title")
	_examineeEmailRecord.Content = field.NewString(tableName, "content")
	_examineeEmailRecord.ReceiverEmail = field.NewString(tableName, "receiver_email")
	_examineeEmailRecord.SendTime = field.NewTime(tableName, "send_time")
	_examineeEmailRecord.EmailStatus = field.NewInt32(tableName, "email_status")
	_examineeEmailRecord.SenderEmail = field.NewString(tableName, "sender_email")
	_examineeEmailRecord.CopyReceiverEmail = field.NewString(tableName, "copy_receiver_email")
	_examineeEmailRecord.Attachment = field.NewString(tableName, "attachment")
	_examineeEmailRecord.IsFalseAddress = field.NewBool(tableName, "is_false_address")
	_examineeEmailRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_examineeEmailRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_examineeEmailRecord.CreatedBy = field.NewString(tableName, "created_by")
	_examineeEmailRecord.UpdatedBy = field.NewString(tableName, "updated_by")
	_examineeEmailRecord.DeletedAt = field.NewField(tableName, "deleted_at")

	_examineeEmailRecord.fillFieldMap()

	return _examineeEmailRecord
}

// examineeEmailRecord 邮件发送日志
type examineeEmailRecord struct {
	examineeEmailRecordDo

	ALL                             field.Asterisk
	ID                              field.String // 主键
	SalesPaperID                    field.String // SalesPaper表的外键
	ExamineeID                      field.String // 考生ID
	ExamineeSalesPaperAssociationID field.String // 考生试卷关联idID
	Title                           field.String // 邮件标题
	Content                         field.String // 邮件内容
	ReceiverEmail                   field.String // 接收人邮箱
	SendTime                        field.Time   // 发送时刻
	EmailStatus                     field.Int32  // 邮件状态：1.未发送，2.已发送，3.发送失败
	SenderEmail                     field.String // 发件人邮箱
	CopyReceiverEmail               field.String // 抄送人邮箱
	Attachment                      field.String // 附件
	IsFalseAddress                  field.Bool   // 是否为错误地址
	CreatedAt                       field.Time   // 创建时间
	UpdatedAt                       field.Time   // 更新时间
	CreatedBy                       field.String // 创建人标识
	UpdatedBy                       field.String // 更新人标识
	DeletedAt                       field.Field  // 逻辑删除时间

	fieldMap map[string]field.Expr
}

func (e examineeEmailRecord) Table(newTableName string) *examineeEmailRecord {
	e.examineeEmailRecordDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e examineeEmailRecord) As(alias string) *examineeEmailRecord {
	e.examineeEmailRecordDo.DO = *(e.examineeEmailRecordDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *examineeEmailRecord) updateTableName(table string) *examineeEmailRecord {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.SalesPaperID = field.NewString(table, "sales_paper_id")
	e.ExamineeID = field.NewString(table, "examinee_id")
	e.ExamineeSalesPaperAssociationID = field.NewString(table, "examinee_sales_paper_association_id")
	e.Title = field.NewString(table, "title")
	e.Content = field.NewString(table, "content")
	e.ReceiverEmail = field.NewString(table, "receiver_email")
	e.SendTime = field.NewTime(table, "send_time")
	e.EmailStatus = field.NewInt32(table, "email_status")
	e.SenderEmail = field.NewString(table, "sender_email")
	e.CopyReceiverEmail = field.NewString(table, "copy_receiver_email")
	e.Attachment = field.NewString(table, "attachment")
	e.IsFalseAddress = field.NewBool(table, "is_false_address")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.CreatedBy = field.NewString(table, "created_by")
	e.UpdatedBy = field.NewString(table, "updated_by")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *examineeEmailRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *examineeEmailRecord) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 18)
	e.fieldMap["id"] = e.ID
	e.fieldMap["sales_paper_id"] = e.SalesPaperID
	e.fieldMap["examinee_id"] = e.ExamineeID
	e.fieldMap["examinee_sales_paper_association_id"] = e.ExamineeSalesPaperAssociationID
	e.fieldMap["title"] = e.Title
	e.fieldMap["content"] = e.Content
	e.fieldMap["receiver_email"] = e.ReceiverEmail
	e.fieldMap["send_time"] = e.SendTime
	e.fieldMap["email_status"] = e.EmailStatus
	e.fieldMap["sender_email"] = e.SenderEmail
	e.fieldMap["copy_receiver_email"] = e.CopyReceiverEmail
	e.fieldMap["attachment"] = e.Attachment
	e.fieldMap["is_false_address"] = e.IsFalseAddress
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e examineeEmailRecord) clone(db *gorm.DB) examineeEmailRecord {
	e.examineeEmailRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e examineeEmailRecord) replaceDB(db *gorm.DB) examineeEmailRecord {
	e.examineeEmailRecordDo.ReplaceDB(db)
	return e
}

type examineeEmailRecordDo struct{ gen.DO }

func (e examineeEmailRecordDo) Debug() *examineeEmailRecordDo {
	return e.withDO(e.DO.Debug())
}

func (e examineeEmailRecordDo) WithContext(ctx context.Context) *examineeEmailRecordDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e examineeEmailRecordDo) ReadDB() *examineeEmailRecordDo {
	return e.Clauses(dbresolver.Read)
}

func (e examineeEmailRecordDo) WriteDB() *examineeEmailRecordDo {
	return e.Clauses(dbresolver.Write)
}

func (e examineeEmailRecordDo) Session(config *gorm.Session) *examineeEmailRecordDo {
	return e.withDO(e.DO.Session(config))
}

func (e examineeEmailRecordDo) Clauses(conds ...clause.Expression) *examineeEmailRecordDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e examineeEmailRecordDo) Returning(value interface{}, columns ...string) *examineeEmailRecordDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e examineeEmailRecordDo) Not(conds ...gen.Condition) *examineeEmailRecordDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e examineeEmailRecordDo) Or(conds ...gen.Condition) *examineeEmailRecordDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e examineeEmailRecordDo) Select(conds ...field.Expr) *examineeEmailRecordDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e examineeEmailRecordDo) Where(conds ...gen.Condition) *examineeEmailRecordDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e examineeEmailRecordDo) Order(conds ...field.Expr) *examineeEmailRecordDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e examineeEmailRecordDo) Distinct(cols ...field.Expr) *examineeEmailRecordDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e examineeEmailRecordDo) Omit(cols ...field.Expr) *examineeEmailRecordDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e examineeEmailRecordDo) Join(table schema.Tabler, on ...field.Expr) *examineeEmailRecordDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e examineeEmailRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *examineeEmailRecordDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e examineeEmailRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *examineeEmailRecordDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e examineeEmailRecordDo) Group(cols ...field.Expr) *examineeEmailRecordDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e examineeEmailRecordDo) Having(conds ...gen.Condition) *examineeEmailRecordDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e examineeEmailRecordDo) Limit(limit int) *examineeEmailRecordDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e examineeEmailRecordDo) Offset(offset int) *examineeEmailRecordDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e examineeEmailRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *examineeEmailRecordDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e examineeEmailRecordDo) Unscoped() *examineeEmailRecordDo {
	return e.withDO(e.DO.Unscoped())
}

func (e examineeEmailRecordDo) Create(values ...*entity.ExamineeEmailRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e examineeEmailRecordDo) CreateInBatches(values []*entity.ExamineeEmailRecord, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e examineeEmailRecordDo) Save(values ...*entity.ExamineeEmailRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e examineeEmailRecordDo) First() (*entity.ExamineeEmailRecord, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeEmailRecord), nil
	}
}

func (e examineeEmailRecordDo) Take() (*entity.ExamineeEmailRecord, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeEmailRecord), nil
	}
}

func (e examineeEmailRecordDo) Last() (*entity.ExamineeEmailRecord, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeEmailRecord), nil
	}
}

func (e examineeEmailRecordDo) Find() ([]*entity.ExamineeEmailRecord, error) {
	result, err := e.DO.Find()
	return result.([]*entity.ExamineeEmailRecord), err
}

func (e examineeEmailRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ExamineeEmailRecord, err error) {
	buf := make([]*entity.ExamineeEmailRecord, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e examineeEmailRecordDo) FindInBatches(result *[]*entity.ExamineeEmailRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e examineeEmailRecordDo) Attrs(attrs ...field.AssignExpr) *examineeEmailRecordDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e examineeEmailRecordDo) Assign(attrs ...field.AssignExpr) *examineeEmailRecordDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e examineeEmailRecordDo) Joins(fields ...field.RelationField) *examineeEmailRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e examineeEmailRecordDo) Preload(fields ...field.RelationField) *examineeEmailRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e examineeEmailRecordDo) FirstOrInit() (*entity.ExamineeEmailRecord, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeEmailRecord), nil
	}
}

func (e examineeEmailRecordDo) FirstOrCreate() (*entity.ExamineeEmailRecord, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ExamineeEmailRecord), nil
	}
}

func (e examineeEmailRecordDo) FindByPage(offset int, limit int) (result []*entity.ExamineeEmailRecord, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e examineeEmailRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e examineeEmailRecordDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e examineeEmailRecordDo) Delete(models ...*entity.ExamineeEmailRecord) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *examineeEmailRecordDo) withDO(do gen.Dao) *examineeEmailRecordDo {
	e.DO = *do.(*gen.DO)
	return e
}
