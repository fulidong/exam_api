// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package exam_api

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"exam_api/internal/data/entity"
)

func newSalesPaperComment(db *gorm.DB, opts ...gen.DOOption) salesPaperComment {
	_salesPaperComment := salesPaperComment{}

	_salesPaperComment.salesPaperCommentDo.UseDB(db, opts...)
	_salesPaperComment.salesPaperCommentDo.UseModel(&entity.SalesPaperComment{})

	tableName := _salesPaperComment.salesPaperCommentDo.TableName()
	_salesPaperComment.ALL = field.NewAsterisk(tableName)
	_salesPaperComment.ID = field.NewString(tableName, "id")
	_salesPaperComment.SalesPaperID = field.NewString(tableName, "sales_paper_id")
	_salesPaperComment.Content = field.NewString(tableName, "content")
	_salesPaperComment.UpScore = field.NewFloat64(tableName, "up_score")
	_salesPaperComment.LowScore = field.NewFloat64(tableName, "low_score")
	_salesPaperComment.CreatedAt = field.NewTime(tableName, "created_at")
	_salesPaperComment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_salesPaperComment.CreatedBy = field.NewString(tableName, "created_by")
	_salesPaperComment.UpdatedBy = field.NewString(tableName, "updated_by")
	_salesPaperComment.DeletedAt = field.NewField(tableName, "deleted_at")

	_salesPaperComment.fillFieldMap()

	return _salesPaperComment
}

// salesPaperComment 售卷评语表，不同区间对应不同评语
type salesPaperComment struct {
	salesPaperCommentDo

	ALL          field.Asterisk
	ID           field.String  // 主键
	SalesPaperID field.String  // SalesPaper表的外键
	Content      field.String  // 评语
	UpScore      field.Float64 // 上限分数区分点
	LowScore     field.Float64 // 下限分数区分点
	CreatedAt    field.Time    // 创建时间
	UpdatedAt    field.Time    // 更新时间
	CreatedBy    field.String  // 创建人标识
	UpdatedBy    field.String  // 更新人标识
	DeletedAt    field.Field   // 逻辑删除时间

	fieldMap map[string]field.Expr
}

func (s salesPaperComment) Table(newTableName string) *salesPaperComment {
	s.salesPaperCommentDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s salesPaperComment) As(alias string) *salesPaperComment {
	s.salesPaperCommentDo.DO = *(s.salesPaperCommentDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *salesPaperComment) updateTableName(table string) *salesPaperComment {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.SalesPaperID = field.NewString(table, "sales_paper_id")
	s.Content = field.NewString(table, "content")
	s.UpScore = field.NewFloat64(table, "up_score")
	s.LowScore = field.NewFloat64(table, "low_score")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.CreatedBy = field.NewString(table, "created_by")
	s.UpdatedBy = field.NewString(table, "updated_by")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *salesPaperComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *salesPaperComment) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sales_paper_id"] = s.SalesPaperID
	s.fieldMap["content"] = s.Content
	s.fieldMap["up_score"] = s.UpScore
	s.fieldMap["low_score"] = s.LowScore
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_by"] = s.UpdatedBy
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s salesPaperComment) clone(db *gorm.DB) salesPaperComment {
	s.salesPaperCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s salesPaperComment) replaceDB(db *gorm.DB) salesPaperComment {
	s.salesPaperCommentDo.ReplaceDB(db)
	return s
}

type salesPaperCommentDo struct{ gen.DO }

func (s salesPaperCommentDo) Debug() *salesPaperCommentDo {
	return s.withDO(s.DO.Debug())
}

func (s salesPaperCommentDo) WithContext(ctx context.Context) *salesPaperCommentDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s salesPaperCommentDo) ReadDB() *salesPaperCommentDo {
	return s.Clauses(dbresolver.Read)
}

func (s salesPaperCommentDo) WriteDB() *salesPaperCommentDo {
	return s.Clauses(dbresolver.Write)
}

func (s salesPaperCommentDo) Session(config *gorm.Session) *salesPaperCommentDo {
	return s.withDO(s.DO.Session(config))
}

func (s salesPaperCommentDo) Clauses(conds ...clause.Expression) *salesPaperCommentDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s salesPaperCommentDo) Returning(value interface{}, columns ...string) *salesPaperCommentDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s salesPaperCommentDo) Not(conds ...gen.Condition) *salesPaperCommentDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s salesPaperCommentDo) Or(conds ...gen.Condition) *salesPaperCommentDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s salesPaperCommentDo) Select(conds ...field.Expr) *salesPaperCommentDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s salesPaperCommentDo) Where(conds ...gen.Condition) *salesPaperCommentDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s salesPaperCommentDo) Order(conds ...field.Expr) *salesPaperCommentDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s salesPaperCommentDo) Distinct(cols ...field.Expr) *salesPaperCommentDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s salesPaperCommentDo) Omit(cols ...field.Expr) *salesPaperCommentDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s salesPaperCommentDo) Join(table schema.Tabler, on ...field.Expr) *salesPaperCommentDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s salesPaperCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *salesPaperCommentDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s salesPaperCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) *salesPaperCommentDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s salesPaperCommentDo) Group(cols ...field.Expr) *salesPaperCommentDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s salesPaperCommentDo) Having(conds ...gen.Condition) *salesPaperCommentDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s salesPaperCommentDo) Limit(limit int) *salesPaperCommentDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s salesPaperCommentDo) Offset(offset int) *salesPaperCommentDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s salesPaperCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *salesPaperCommentDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s salesPaperCommentDo) Unscoped() *salesPaperCommentDo {
	return s.withDO(s.DO.Unscoped())
}

func (s salesPaperCommentDo) Create(values ...*entity.SalesPaperComment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s salesPaperCommentDo) CreateInBatches(values []*entity.SalesPaperComment, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s salesPaperCommentDo) Save(values ...*entity.SalesPaperComment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s salesPaperCommentDo) First() (*entity.SalesPaperComment, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaperComment), nil
	}
}

func (s salesPaperCommentDo) Take() (*entity.SalesPaperComment, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaperComment), nil
	}
}

func (s salesPaperCommentDo) Last() (*entity.SalesPaperComment, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaperComment), nil
	}
}

func (s salesPaperCommentDo) Find() ([]*entity.SalesPaperComment, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SalesPaperComment), err
}

func (s salesPaperCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SalesPaperComment, err error) {
	buf := make([]*entity.SalesPaperComment, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s salesPaperCommentDo) FindInBatches(result *[]*entity.SalesPaperComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s salesPaperCommentDo) Attrs(attrs ...field.AssignExpr) *salesPaperCommentDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s salesPaperCommentDo) Assign(attrs ...field.AssignExpr) *salesPaperCommentDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s salesPaperCommentDo) Joins(fields ...field.RelationField) *salesPaperCommentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s salesPaperCommentDo) Preload(fields ...field.RelationField) *salesPaperCommentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s salesPaperCommentDo) FirstOrInit() (*entity.SalesPaperComment, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaperComment), nil
	}
}

func (s salesPaperCommentDo) FirstOrCreate() (*entity.SalesPaperComment, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SalesPaperComment), nil
	}
}

func (s salesPaperCommentDo) FindByPage(offset int, limit int) (result []*entity.SalesPaperComment, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s salesPaperCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s salesPaperCommentDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s salesPaperCommentDo) Delete(models ...*entity.SalesPaperComment) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *salesPaperCommentDo) withDO(do gen.Dao) *salesPaperCommentDo {
	s.DO = *do.(*gen.DO)
	return s
}
